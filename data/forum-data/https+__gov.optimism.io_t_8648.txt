{
  "title": "Zk fault proof for OP Stack",
  "content": "Hi, We are the cryptographic team in the BNB Chain. We are constantly updating\nour knowledge of the latest zero-knowledge proof techniques for layer 2s and\nother use cases.\n\nRecently, we proposed a zero-knowledge-based solution (partially utilizing the\ncircuit proposed by the Polygon Zero team) for opBNB fraud-proof, and we think\nit could also be used for OP Stack.\n\nWe respectfully submit our proposals here for your consideration and feedback.\n\nAs a new user, I can only upload one embeddable picture. If you want to review\nthe full article, please kindly visit Zk fault proof for opBNB - opBNB - Build N\nBuild Forum (bnbchain.org)\n[https://forum.bnbchain.org/t/zk-fault-proof-for-opbnb/2915]\n\n\nBACKGROUND - GENERIC VM V.S. CUSTOM CIRCUIT\n\nIn the last year, Optimism initiated a Foundation Mission Request\n[https://github.com/ethereum-optimism/ecosystem-contributions/issues/61] to\ndevelop the Op Stack Zero Knowledge Proof (ZKP) for verifying the correctness of\nits fault proof program. Once implemented, this ZKP can reduce the challenge\nperiod for Optimism from 7 days to 12 hours and avoid complicated interactive\nchallenge procedures. Optimism accepted and funded three proposals from Risc\nZero, O(1) Labs, and the ETH Storage team. Each team proposes a similar\napproach, where the fault proof program, written in Go or Rust, is compiled into\na generic instruction set such as RISCV, WASM, or MIPS. These compiled\ninstructions are then verified for correctness using zkVMs like zkRISCV, zkWASM,\nor zkMIPS, which we refer to as the generic VM approach. An alternative approach\ninvolves developing a custom circuit for the fault proof program, which we\nbelieve offers better performance compared to the generalized VM method.\nRecently, Polygon Zero announced the development of a highly performant type1\nzkEVM, which aligns with our expectations for creating a custom circuit for\nopBNB’s fault proof program. Therefore, we have decided to develop a proof of\nconcept (PoC) based on Polygon Zero’s type1 zkEVM codebase to demonstrate the\nperformance advantages compared to the generalized VM approach. The PoC involves\nthe protocol specific to Optimism, and can be used to generate ZKP for Optimism\nblocks. The figure below illustrates the simple workflow of the two approaches.\nIt is worth noting that our proposal aims not only to improve performance but\nalso to enhance the robustness of the Optimism multi-proofs system.\n\n\n\nimage\n[https://europe1.discourse-cdn.com/bc41dd/optimized/2X/d/db4f62214528e7ec322c58f9f4116eeace10f13b_2_669x500.jpeg]\nimage844×630 58.6 KB\n[https://europe1.discourse-cdn.com/bc41dd/original/2X/d/db4f62214528e7ec322c58f9f4116eeace10f13b.jpeg]\n\n\n\n\nCURRENT FAULT PROOF OVERVIEW\n\nBefore delving into the ZK fault proof design, Let’s quickly review the current\noptimism fault proof design.\n\nThe offchain fault proof program consists of two parts:\n\n * Derive the disputed block from the anchor L1 block hash;\n * Execute the disputed block based on the agreed L2 state root and compare the\n   execution result with the claimed output root\n\nThe onchain fault dispute game works as following:\n\n * The attacker and defender take turns initiating on-chain actions based on the\n   claims submitted on-chain by their opponents until they agree on the disputed\n   L2 block;\n * They then repeat the above challenge process until they agree on the disputed\n   instruction of the off-chain fault proof program, which uses the disputed L2\n   block as the input;\n * Then invoke the on-chain MIPS contract to execute the disputed instruction\n   which will determine the winner\n\nThe above fault proof design has following disadvantages:\n\n * The attacker or defender needs to send many on-chain transactions, resulting\n   in significant gas cost;\n * The attacker or defender is susceptible to censorship attacks\n   [https://kelvinfichter.com/pages/thoughts/challenge-periods/], where\n   transactions become harder to include in the L1 chain due to congestion\n   created by either party. To mitigate this risk, the on-chain dispute game\n   must allocate sufficient time for each player to act, resulting in the long\n   challenge period\n\n\nARCHITECTURE OF ZK FAULT PROOF\n\nThe ZK solution for fault proof is designed to address the aforementioned\ndisadvantages. The following figure illustrates the components and workflow of\nthe ZK fault proof design.\n\nAs a new user, I can only upload one embeddable picture. If you want to review\nthe full article, please kindly visit Zk fault proof for opBNB - opBNB - Build N\nBuild Forum (bnbchain.org)\n[https://forum.bnbchain.org/t/zk-fault-proof-for-opbnb/2915]\n\n * Optimism Block Execution Circuit: This circuit processes L2 blocks according\n   to the Optimism state transition protocol and generates an execution proof to\n   verify the correctness of the L2 block;\n * Optimism Block Derivation Circuit: Derivation means deriving L2 blocks from\n   L1 data. This circuit encodes the Optimism block derivation logic\n   [https://specs.optimism.io/protocol/derivation.html] from an L1 block hash\n   and produces a derivation proof to verify the correctness of the derived L2\n   block;\n * Fault Proof Circuit: This circuit encodes the ZKP verification logic to\n   validate both the execution proof and derivation proof, and includes the\n   consistency check logic between the public inputs of the circuits;\n * zkFaultProofVerifier Contract: This contract resides on the L1 chain and is\n   used to verify the correctness of the ZK fault proof, determining which party\n   wins.\n\nThe challenger monitors the L2 output root proposed on-chain by the proposer.\nUpon finding an invalid output root, the challenger can generate a ZK fault\nproof for the disputed L1 block and submit it to the zkFaultProofVerifier\ncontract. If the verification passes, the challenger wins.\n\nThe ZK fault proof approach has the following advantages:\n\n * Challenger only needs to submit one on-chain transaction to the L1 which\n   greatly reduce the gas cost;\n * Since the dispute result can be determined with just a single transaction,\n   the challenger is less susceptible to censorship attacks. Therefore, the\n   challenge period can be appropriately reduced to improve user experience.\n\n\nOUR WORK\n\nTo demonstrate the performance advantages of the custom circuit, we quickly\ndeveloped a POC based on type1 zkEVM. This POC only includes the Optimism block\nexecution circuit, which is the most time-consuming of all the circuits\nmentioned above. The adoption work we have done is as follows:\n\n * Changed the gas fee calculation mechanism according to Optimism/opBNB\n   protocol;\n * Optimism/opBNB transaction fees consist of two components: the Execution Gas\n   Fee and the L1 Data Fee. The Execution Gas Fee covers the cost of executing\n   transactions on L2, similar to Ethereum’s gas fee. The L1 Data Fee covers the\n   cost of publishing L2 transaction data on Ethereum. More information can be\n   found here [https://docs.optimism.io/stack/transactions/fees]\n * Added the handling logic for Deposited Transaction and Deposit Receipt;\n   * Deposited Transactions are derived from L1, and included in a L2 block.\n     There are two kinds of deposited transactions: L1 attributes deposited\n     transaction (submits the L1 block’s attributes to the L1 Attributes\n     Pre-deployed Contract) and User deposited transactions (transactions\n     derived from an L1 call to the deposit contract). More information can be\n     found here [https://specs.optimism.io/protocol/deposits.html]\n * Fix bugs in the MPT trace generation codes;\n * Add parallelization code for transaction proof generation\n\n\nPERFORMANCE TESTING\n\nWe conducted a performance test for the same L2 batch using the opBNB custom\ncircuit and Zeth developed by Risc Zero. The opBNB custom circuit is more\nefficient than the generic VM approach, generating 10 times fewer ZK cycles and\nproving 5-6 times faster than zeth. This makes the opBNB approach 5-6 times\ncheaper.\n\nThe tables below show the configuration and performance data for both.\n\nConfigurations for opBNB custom circuit and Zeth:\n\nZeth opBNB custom circuit Machine g6.xlarge (GPU) m6i.32xlarge (CPU) Sever cost\n1 Year reserved: $0.5239/hour 1 Year reserved: $4.064/hour Segment 2^20 No\ncontinuations mechanism yet Code commit GitHub - risc0/zeth at\n5b1f4c52f6248e2fd1c9a6af49ac19532ac38ea7\n[https://github.com/risc0/zeth/tree/5b1f4c52f6248e2fd1c9a6af49ac19532ac38ea7]\nCommits · bnb-chain/zk_evm · GitHub\n[https://github.com/bnb-chain/zk_evm/commits/benchmark-optimism/]\n\nBatch information used in opBNB custom circuit and Zeth\n\nOp head Op blocks in epoch Op transactions in epoch Op gas in epoch 113963903 6\n43 31318286 114020225 6 66 17593272 114165247 6 70 76354707 114223488 6 76\n32366635 114547269 6 35 34833946 114354386 6 47 32964680 114453440 6 43 42705954\n114511643 6 38 26039828\n\nZeth generic vm approach and opBNB custom circuit performance data:\n\nAs a new user, I can only upload one embeddable picture. If you want to review\nthe full article, please kindly visit Zk fault proof for opBNB - opBNB - Build N\nBuild Forum (bnbchain.org)\n[https://forum.bnbchain.org/t/zk-fault-proof-for-opbnb/2915]\n\nBased on the performance tables above, we can draw the following conclusions:\n\n * From the perspective of ZK cycles, the opBNB custom circuit is more efficient\n   than the generic VM approach. For the same batch, the number of ZK cycles\n   generated by the generic VM method is 10 times that of the type1 zkEVM;\n * From the perspective of proving time, when we consider the fixed server costs\n   for the opBNB custom circuit and zeth, the opBNB is 5-6 times faster than\n   zeth;\n * Similarly, when considering generating ZKPs within the same time window, we\n   can conclude that the opBNB custom circuit approach is 5-6 times cheaper than\n   zeth based on the generic VM approach.\n * There are some batches(113963903, 114223488, 114511643) where the performance\n   of the opBNB custom circuit doesn’t meet expectations.\n\n\nFUTURE WORK\n\nThe type1 zkEVM is currently in development, with features like continuations\ndesigned to make proof generation more parallel-friendly. Additionally, efforts\nare underway to enhance the performance of the backend proving system. The opBNB\nteam can contribute to these planned improvements. We believe that the\nperformance of the opBNB custom circuit approach will significantly improve as\nthe performance of the type 1 zkEVM continues to advance.\n\nTo achieve a complete ZK fault proof for Optimism or opBNB, we need to implement\nall the components such as the block derivation circuit, fault proof circuit,\nand the on-chain zkFaultProofVerifier contract. These will be important tasks\nfor the next phase of our PoC.\n\nOnce the development of the opBNB custom circuit design is complete, the opBNB\nteam will contribute this work to the Optimism ecosystem to enhance the security\nand performance of the multi-proof system.",
  "views": 42,
  "like_count": 0,
  "word_count": 1674,
  "answer": [],
  "created_at": "2024-07-31T13:10:07.415Z"
}