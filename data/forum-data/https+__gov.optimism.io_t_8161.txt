{
  "title": "[FINAL] Protocol Upgrade #7: Fault Proofs",
  "content": "EXECUTIVE SUMMARY\n\nHi I’m Adrian, a protocol engineer at OP Labs. OP Labs is a software development\ncompany focused on the Optimism ecosystem and a core developer of the OP Stack.\nWe provide some services to, but do not represent or speak on behalf of, the\nOptimism Foundation.\n\nThis protocol upgrade reduces the trust assumptions for users of OP Mainnet by\nenabling permissionless output proposals and a permissionless fault proof\nsystem. As part of a responsible and safe rollout of Fault Proofs, it preserves\nthe ability for the guardian to override if necessary to maintain security. As a\nresult, withdrawals no longer depend on the privileged proposer role posting an\noutput root, allowing the entire withdrawal process to be completed without any\nprivileged actions. The trust assumption is reduced to requiring only that the\nguardian role does not act to intervene. Combined with the Guardian, Security\nCouncil Threshold and L2 ProxyAdmin Ownership changes\n[https://gov.optimism.io/t/upgrade-proposal-guardian-security-council-threshold-and-l2-proxyadmin-ownership-changes-for-stage-1-decentralization/8157]\nproposal, we believe this satisfies the criteria to have OP Chains reach Stage 1\nstatus.\n\nIf this vote passes and becomes the new governance-approved version of the OP\nStack, the upgrade will be deployed to OP Mainnet by the Security Council\n(currently in Phase 0, which is a joint 2/2 multisig between the Security\nCouncil Safe and the Foundation’s Safe) shortly after the end of the veto\nperiod.\n\n\nMOTIVATION\n\nSecuring withdrawals with a Fault Proof system is a key requirement for meeting\nthe stage 1\n[https://medium.com/l2beat/introducing-stages-a-framework-to-evaluate-rollups-maturity-d290bb22befe]\ndecentralization milestone with the ultimate goal of enhancing the security of\nuser assets.\n\nThis upgrade enables a permissionless Fault Proof system which allows anyone to\npropose output roots and participate in the dispute system. As a result, users\nwill be able to withdraw assets from L2 to L1 without relying on the sequencer\nor any other centralized infrastructure.\n\nAs part of a responsible and safe rollout of Fault Proofs, it is required that\nat this stage, the existing Guardian role\n[https://docs.optimism.io/chain/security/privileged-roles#guardian] capabilities\nare carried over to this new version, meaning that the Guardian can disable the\nFault Proof system in the event of emergency. While this means the system is\nstill not fully trustless - as is the nature of Stage 1 designation - it reduces\nthe trust assumption to requiring only that the Guardian role does not act\nmaliciously, rather than requiring a single permissioned proposer to actively\npropose. This proposed upgrade extends the Guardian role’s pause ability to be\nable to disable the fault proof system, an extension of its existing\ncapabilities in the fault proofs context. For more info on how the Guardian role\nis expected to be permissioned, see this post\n[https://gov.optimism.io/t/upgrade-proposal-guardian-security-council-threshold-and-l2-proxyadmin-ownership-changes-for-stage-1-decentralization/8157].\n\nThis upgrade also includes a smart contract framework that provides a solid\nbasis for a future multi-proof system, allowing additional proof systems to\neasily be added. This will further reduce trust assumptions in later upgrades as\nthe OP Stack moves towards achieving Stage 2 decentralization.\n\n\nSPECIFICATIONS\n\nThe full specifications for the fault dispute system are available from the\nspecs repo [https://specs.optimism.io/experimental/fault-proof/index.html]. If\nthis proposal is approved, the fault dispute system specs will be promoted from\nthe experimental section of specs, to be part of the canonical spec.\n\nTechnical Details\n\nThis upgrade does not affect the node or execution client software.\n\nPrior to the upgrade, the fault dispute system contracts have been deployed:\n\n 1. DisputeGameFactory (implementation:\n    0xc641A33cab81C559F2bd4b21EA34C290E2440C2B\n    [https://etherscan.io/address/0xc641A33cab81C559F2bd4b21EA34C290E2440C2B]\n    proxy: 0xe5965Ab5962eDc7477C8520243A95517CD252fA9\n    [https://etherscan.io/address/0xe5965Ab5962eDc7477C8520243A95517CD252fA9]) -\n    a factory for creating dispute games that can be used by the upgraded\n    OptimismPortal as the source of proposed output roots.\n 2. FaultDisputeGame (0x4146DF64D83acB0DcB0c1a4884a16f090165e122\n    [https://etherscan.io/address/0x4146DF64D83acB0DcB0c1a4884a16f090165e122]) -\n    an implementation of a dispute game that uses permissionless, interactive\n    bi-section of the chain state\n\n * This is initialized with an ABSOLUTE_PRESTATE of\n   0x037ef3c1a487960b0e633d3e513df020c43432769f41a634d18a9595cbf53c55. This is\n   the initial state for the Cannon MIPS VM to run op-program tagged in the\n   optimism repo at commit a6d4eeda11477adfcd106e03131625a40334e3a6(tagged as\n   release op-program/v1.0.0). This prestate can be rebuilt using the make\n   reproducible-prestate command (docs\n   [https://github.com/ethereum-optimism/optimism/tree/op-program/v1.0.0/op-program#generating-the-absolute-prestate])\n\n 3. PermissionedFaultDisputeGame (0xE9daD167EF4DE8812C1abD013Ac9570C616599A0\n    [https://etherscan.io/address/0xE9daD167EF4DE8812C1abD013Ac9570C616599A0]) -\n    extends FaultDisputeGame to restrict participation to privileged roles. This\n    can be used as a fallback in the event of failure of the fault dispute game.\n 4. AnchorStateRegistry (implementation:\n    0x6B7da1647Aa9684F54B2BEeB699F91F31cd35Fb9\n    [https://etherscan.io/address/0x6B7da1647Aa9684F54B2BEeB699F91F31cd35Fb9]\n    proxy: 0x18DAc71c228D1C32c99489B7323d441E1175e443\n    [https://etherscan.io/address/0x18DAc71c228D1C32c99489B7323d441E1175e443]) -\n    stores the latest “anchor” state for each available FaultDisputeGame type.\n    By using stored anchor states, new FaultDisputeGame instances can be\n    initialized with a more recent starting state which reduces the amount of\n    required offchain computation.\n\n * This is initialized with the starting anchor for CANNON and\n   PERMISSIONED_CANNON games set to block number 120059863 and output root\n   0x2694ac14dcf54b7a77363e3f60e6462dc78da0d43d1e2f058dbb6a1488814977.\n * As the fault dispute system contracts are deployed ahead of time and are\n   permissionless, it is possible for dispute games to be created prior to\n   OptimismPortal being upgraded. If these games resolve that the output root is\n   valid, the AnchorStateRegistry will be updated with the new value. The\n   validity of the current value of the AnchorStateRegistry will be manually\n   verified as part of the upgrade process.\n\n 5. DelayedWETH (implementation: 0x97988d5624F1ba266E1da305117BCf20713bee08\n    [https://etherscan.io/address/0x97988d5624F1ba266E1da305117BCf20713bee08]\n    proxy: 0xE497B094d6DbB3D5E4CaAc9a14696D7572588d14\n    [https://etherscan.io/address/0xE497B094d6DbB3D5E4CaAc9a14696D7572588d14]) -\n    an extension to WETH9 that allows for delayed withdrawals. This introduces a\n    time delay before bonds posted as part of a FaultDisputeGame can be\n    withdrawn, allowing the Guardian role to change the allocation of bonds if\n    there is a bug in the FaultDisputeGame to preserve incentive compatibility.\n 6. PreimageOracle (0xD326E10B8186e90F4E2adc5c13a2d0C137ee8b34\n    [https://etherscan.io/address/0xD326E10B8186e90F4E2adc5c13a2d0C137ee8b34]) -\n    stores validated pre-images that can be retrieved by hash. This is used by\n    op-program and other fault proof programs to retrieve data required to\n    perform the derivation process and validate the output root.\n 7. MIPS (0x0f8EdFbDdD3c0256A80AD8C0F2560B1807873C9c\n    [https://etherscan.io/address/0x0f8EdFbDdD3c0256A80AD8C0F2560B1807873C9c]) -\n    the Cannon MIPS VM implementation. Executes a single MIPS CPU instruction\n    on-chain as part of the step call to determine the validity of claims at the\n    bottom level of the dispute game.\n\nThere are also two off-chain programs provided to support users interacting with\nthe fault proof system:\n\n * op-challenger - implements the honest actor algorithm for the\n   FaultDisputeGame to automatically challenge invalid output root proposals and\n   defend valid ones.\n * op-dispute-mon - monitors the fault proof system, exposing a variety of\n   metrics that enable monitoring and alerting of the fault proof system, such\n   as when games are forecast or have resolved with a status that is\n   inconsistent with the local op-node used by op-dispute-mon.\n\nThe following changes are being introduced with the upgrade:\n\n 1. Upgrade the OptimismPortal contract\n    (0xe2F826324b2faf99E513D16D266c3F80aE87832B\n    [https://etherscan.io/address/0xe2F826324b2faf99E513D16D266c3F80aE87832B])\n    that uses the DisputeGameFactory as the source of output proposals. (spec\n    [https://specs.optimism.io/experimental/fault-proof/stage-one/bridge-integration.html])\n\n * The proveWithdrawalTransaction method is modified, retaining the same\n   signature function but with the second argument now providing an index within\n   the DisputeGameFactory’s list of created games.\n * Enforces an air-gap requiring a period of time\n   (DISPUTE_GAME_FINALITY_DELAY_SECONDS) to have elapsed since the game resolved\n   before the game can be used in a call to finalizeWithdrawalTransaction.\n * The Guardian role can blacklist dispute games or change the\n   RESPECTED_GAME_TYPE to invalidate dispute games in the event of failures in\n   the fault proof system.\n * Users are now able to reprove their withdrawals at any time. Previously, a\n   user could only reprove their withdrawal if the output root was removed from\n   the L2OutputOracle by the guardian, but with this upgrade users will be able\n   to reprove their withdrawal at any time. This allows users to change the\n   dispute game their withdrawal is proven against if needed without waiting for\n   the game to actually resolve as invalid. The 7 day withdrawal finalization\n   delay resets when a user reproves their withdrawal to ensure there is still a\n   full 7 day air-gap between proving and finalizing the withdrawal.\n\n 2. The L2OutputOracle contract is no longer used\n 3. The SystemConfig contract (0xF56D96B2535B932656d3c04Ebf51baBff241D886\n    [https://etherscan.io/address/0xF56D96B2535B932656d3c04Ebf51baBff241D886])\n    is updated to:\n\n * reference the DisputeGameFactory address instead of the L2OutputOracle\n   address.\n * enforce a maximum block gas limit of 200,000,000 to prevent the gas limit\n   being raised to the point where block execution is too resource intensive to\n   be processed in cannon as part of the fault dispute system.\n * remove the setResourceConfig setter to prevent the System Config Owner\n   [https://docs.optimism.io/chain/security/privileged-roles#system-config-owner],\n   from misconfiguring the resource config and preventing force inclusions from\n   L1 (e.g. by setting the maximum deposit gas too low). The resource config can\n   now only be changed by upgrading the SystemConfig contract which is\n   controlled by the L1 Proxy Admin\n   [https://docs.optimism.io/chain/security/privileged-roles#l1-proxy-admin] (a\n   2-of-2 multisig with the Optimism Foundation and Security Council).\n\nThese contracts are tagged in the optimism repo at commit\n547ea72d9849e13ce169fd31df0f9197651b3f86\n[https://github.com/ethereum-optimism/optimism/commit/547ea72d9849e13ce169fd31df0f9197651b3f86]\n(tagged as release candidate op-contracts/v1.4.0-rc.4\n[https://github.com/ethereum-optimism/optimism/releases/tag/op-contracts%2Fv1.4.0-rc.4]\n). [https://www.notion.so/4c0c7a1222d54129bf405e408d5eecdd?pvs=21]\n\nSecurity Considerations\n\nOur design philosophy has been to focus on fundamental safety mechanisms first.\nWe acknowledge that gaining certainty in the correctness of the complex logic\nfound within the FaultDisputeGame contract, its dependencies, and the offchain\nop-challenger software will take time. Therefore, we have included a number of\nfallback mechanisms designed to maintain the safety of the system even in the\nevent of a complete failure of those complex components - in particular the\nability for the Guardian role to pause withdrawals and disable the Fault Proof\nSystem.\n\nThe Sherlock community completed a successful bug hunt\n[https://audits.sherlock.xyz/contests/205], focused on issues which would allow\nthese fundamental safety mechanisms to be subverted. See the final report\n[https://audits.sherlock.xyz/contests/205/report] for further details. The\nreported issues have been addressed. As none of the reported issues circumvented\nthe fundamental safety mechanisms we decided not to pursue a fix review.\n\nImpact Summary\n\n * As part of the upgrade, all pending withdrawals will be invalidated. Users\n   with pending withdrawals will need to re-prove their withdrawals against an\n   output proposal submitted in the form of a FaultDisputeGame which will\n   restart the withdrawal delay period. This means that withdrawals initiated\n   less than one week before the upgrade is executed will only be finalized one\n   week after the upgrade is complete. For example, a withdrawal initiated 6\n   days before the upgrade would take a total of 13 days to finalize.\n * Users reading output roots from the L2OutputOracle contract will need to\n   update to read from the DisputeGameFactory.\n * OP Labs does not anticipate any down time due to this upgrade, and node\n   operators are not affected.\n * While the normal case for dispute games allows them to resolve within the 7\n   day withdrawal delay period, the maximum possible time for a dispute game to\n   resolve is 16 days which may lengthen the withdrawal delay for withdrawals\n   proven against that dispute game. Extending a game to this point incurs a\n   significant cost and users may reprove their withdrawal against a different\n   output root at any time. The Game Clock section of the specs\n   [https://specs.optimism.io/experimental/fault-proof/stage-one/fault-dispute-game.html#game-clock]\n   provides further details.\n * Tooling that performs withdrawals will need to be updated to use the new\n   DisputeGameFactory as the source of output roots when proving withdrawals.\n   New versions of the Optimism SDK and viem have already been released with\n   this support.\n\n\nACTION PLAN\n\nIf this proposal passes a Token House vote, the L1 contracts will be upgraded\nfollowing the completion of the Citizens’ House Veto Period following Voting\nCycle #23a. Prior to upgrading, the anchor state in the AnchorStateRegistry will\nbe validated manually. If the value is invalid due to a game having resolved\nincorrectly prior to full deployment, a replacement version of the\nAnchorStateRegistry will be deployed using the starting anchor in this proposal,\nbefore upgrading contracts. The upgrade will be completed atomically such that\nall affected L1 contracts will be upgraded within a single transaction.\n\nThis upgrade has already been activated on internal devnets and the op-sepolia\ntestnet.\n\nAs this is a L1 contracts-only upgrade, no action is required by node operators.\n\nTo prepare infra and the community for withdrawal flow changes, we will be\nrolling out mainnet messaging starting this week. This will expand on the\npreparation for breaking changes\n[https://docs.optimism.io/builders/notices/fp-changes] implemented with\ncontributors for OP Sepolia, which we coordinated with ~30 infra teams and\nseveral rounds of public posts. Mainnet communication will include:\n\n * Comms: At least two rounds of public messaging on OP social channels\n   notifying users of the changes to withdrawal flow, and of the impact on\n   withdrawals during the upgrade window.\n * Contributors: Coordinate with bridge infra contributors, including\n   maintainers of popular frontends to the standard bridge, to post banners\n   notifying users of the changes.\n * Support: Prep developer support team for inbound support tickets about\n   transactions that need to be reproven due to not finishing the first proof in\n   time before the changes.\n * Bridges: Notify bridges and other infra contributors whose operations might\n   be impacted due to the withdrawal flow changes.\n\nIf a critical security issue is discovered before upgrading, OP Labs will\ncollaborate with the community to extensively communicate that the upgrade will\nno longer occur.\n\n\nCONCLUSION\n\nThe deployment of a permissionless Fault Dispute System to OP Mainnet is a major\nstep forward on the path to decentralization. This proposal is a responsible\napproach to the roll out, preserving the safety checks and functionality of the\nGuardian role while still benefiting from permissionless output proposals and\nlaying a foundation for reaching stage 2 decentralization.",
  "views": 4568,
  "like_count": 97,
  "word_count": 8404,
  "answer": [
    {
      "content": "On behalf of the Developer Advisory Board, here is a non-technical summary of\nthis upgrade proposal:\n\nFor Optimism withdrawals to function, the L2 state root must be posted to L1.\n\nYou can think of the L2 state root as a single “summary” value that can be used\nto prove any fact about L2’s state. This value is used when withdrawing funds to\nprove those funds were actually withdrawn on L2.\n\n(Optimism actually uses a few different values to make proving simpler, but we\ncan skip that for this discussion.)\n\nBefore this upgrade, this L2 root value was posted to the L2OutputOracle\ncontract. It could only be posted by a trusted, permissioned account. As long as\nthis permissioned account acted honestly, the chain would function as intended.\n\nThis upgrade aims to move towards technical decentralization by allowing anyone\nto post the L2 root.\n\nHow does this work?\n\nL2 roots are proven through “games”. In the current game, anyone can propose a\nroot (and put up a financial bond along with it). Any other user can challenge\nthem (also putting up a bond), and the two users then go back and forth proving\nfacts about how the root was calculated and increasing their bonds until either\n(a) one of them gives up or (b) they disagree about a fact so basic that it can\nbe proven on chain.\n\nIf the user who proposed the root wins this game, the root is considered valid.\nOtherwise, it is considered invalid. The loser also forfeits their bonds to the\nwinner.\n\nOnly a valid game that has had enough time to work itself out can have\nwithdrawals proven against it, which stops dishonest users from being able to\npost an incorrect root.\n\nSafeguards\n\nThe game itself may still have security issues. As the proposal says: “We\nacknowledge that gaining certainty in the correctness of the complex logic found\nwithin the FaultDisputeGame contract, its dependencies, and the offchain\nop-challenger software will take time.”\n\nFor this period where the security of the game may still be at risk, Optimism\nhas poured significant resources into building safeguards around the game, as\nfollows:\n\n 1. An off chain monitoring system has been set up to monitor all proposed roots\n    and ensure they align with the correct state.\n\n 2. After a root is finalized through a game, an additional delay has been added\n    before withdrawals can occur. During this period, the GUARDIAN role can\n    reject the root. This will allow the monitoring to stop invalid withdrawals.\n\n 3. A contract called DelayedWETH has been set up to hold the bonds and only\n    allow payouts after a delay, so that bonds can be redirected towards the\n    rightful recipient in the event that a game is abused.\n\nOther Implications\n\nAs a part of the OptimismPortal (the contract that handles withdrawals) being\nupgraded, all previously proved withdrawals will no longer work. This means that\nany previously proven withdrawal that has not yet been finalized will need to be\nreproved, including an additional wait before being able to finalize.\n\n--------------------------------------------------------------------------------\n\nIf you have any questions about the technical details of this upgrade, feel free\nto post here and I (or someone else in the DAB) will get back to you.",
      "created_at": "2024-05-17T16:26:08.452Z",
      "trust_level": 2,
      "username": "zachobront",
      "admin": false,
      "moderator": false,
      "staff": false,
      "like_count": 18
    },
    {
      "content": "Hey @ajsutton [/u/ajsutton]! At SEED Latam, we are thrilled to see this proposal\nmake its way to the forum. Moving OP Mainnet into Stage 1 is a significant step\nforward, and we are excited that we are likely ready for it.\n\nSome aspects were addressed in the last Governance Call, but we believe there\nare still several points that need to be clarified for the community’s\nunderstanding of this new upgrade:\n\n 1. How large are the bonds expected to be needed to sustain and win a dispute?\n    A summary of the factors involved would be nice.\n 2. How many steps/transactions are required to settle a dispute (worst-case\n    scenario)?\n 3. With Fault Proofs, are escape hatches practically possible? In the event of\n    sequencer and proposer failure, we would expect to initiate an forced\n    withdrawal from L1 and then propose a new state root. Are there any\n    dependencies to consider?\n 4. Since the roles of proposer and challenger will be open to everyone, is\n    there a guide available outlining the best practices for running them?\n\nOn a side note, we appreciate the publication of non-technical summaries (cc:\n@zachobront [/u/zachobront]) below each technical proposal. We hope to help\nproviding context to all interested parties by making these questions outlined\nabove. Thank you.",
      "created_at": "2024-05-22T03:26:39.172Z",
      "trust_level": 2,
      "username": "Joxes",
      "admin": false,
      "moderator": false,
      "staff": false,
      "like_count": 3
    },
    {
      "content": "As part of the Path to Open Metagovernance\n[https://gov.optimism.io/t/the-path-to-open-metagovernance/7728], we’re\nexperimenting with polls to collect more community input.\n\n\nWAS THIS NON-TECHNICAL SUMMARY USEFUL?\n\nPlease provide any additional feedback in the comments below\n\nThis summary was effective at explaining the contents of the proposal\n * 1\n * 2\n * 3\n * 4\n * 5\n\n0 voters\nThis summary influenced my confidence in voting on the proposal\n * 1\n * 2\n * 3\n * 4\n * 5\n\n0 voters\n * I still do not understand this proposal\n\n0 voters",
      "created_at": "2024-05-17T16:35:58.146Z",
      "trust_level": 4,
      "username": "system",
      "admin": true,
      "moderator": true,
      "staff": true,
      "like_count": 2
    },
    {
      "content": "Please note that I’ve edited the original post to add information on two\nadditional changes to the SystemConfig contract about enforcing a maximum block\ngas limit and removing the setResourceConfig. These were unintentionally missed\nin my original summary of the changes but seemed worth noting for transparency.",
      "created_at": "2024-05-20T22:18:42.500Z",
      "trust_level": 3,
      "username": "ajsutton",
      "admin": false,
      "moderator": false,
      "staff": false,
      "like_count": 2
    },
    {
      "content": "Thanks @zachobront [/u/zachobront] and DAB for the summary. Very helpful!",
      "created_at": "2024-05-17T22:29:34.853Z",
      "trust_level": 2,
      "username": "Harper",
      "admin": false,
      "moderator": false,
      "staff": false,
      "like_count": 2
    }
  ],
  "created_at": "2024-05-16T23:14:18.972Z"
}