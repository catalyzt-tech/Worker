{
  "title": "Is the Superchain vision too /optimistic/ on EVM execution?",
  "content": "Hi everyone, CJ here, co-founder at Limitless Labs and RPGF 2 & 3 Badgeholder.\nIn recent months at Limitless, we have been conducting a lot of R&D around fully\nonchain gaming infrastructure. Since real time onchain games can be considered\nsome of the most gas thirsty apps that are out there today, we have explored a\nwealth of topics: from storage engines / data patterns, to shared sequencer\ndesigns, composable rollup architectures, and novel execution environments.\n\nA majority of these things can be more feasibly & efficiently applied to\nfinancial applications, since for example writing a custom state machine or\nleveraging WASM to run Rust & Go programs can enable things like highly\nefficient central limit order books and in general greatly enhance the\nperformance, memory & developer experience / reach of a given layer 2 solution.\nIn general, one might argue that this is easier to solve for than a real time\ngame- there is also no need to implement things like game loops.\n\nMy co-founder is also a Badgeholder & active in governance, our team are\nperpetual Optimists and we love the Superchain. I am trying to figure out how to\nalign our research efforts with the Collective, given the set of limitations\ncurrently faced by Superchain ecosystem developers. Also, I am curious to learn\nmore about the approach to funding & supporting the development of “OP Stack\nHacks” especially as they relate to ensuring the competitiveness of the\nSuperchain relative to other offerings that are out there.\n\nOf course, the current state of things (ie Immutable deploying a zkEVM without a\nprover) mean that vibes & distribution seem to have more weight than actual tech\nbut nevertheless when you look across L2 land as a whole you do see other\necosystems trying to solve some of the challenges I’m referencing here which may\ngive them some advantage moving forwards.\n\nIn the Superchain Explainer [https://docs.optimism.io/stack/explainer], a broad\nvision for a network of commoditised L2s as interchangeable compute resources is\ndescribed.\n\nWe can all agree on the immense value of scaleable decentralized compute & how\nsuch features may replace centralised backends to deliver a trustless web.\n\nHowever, moving onto the core concepts of the Superchain, the first point that\nis referenced is achieving horizontal scalability by spinning up multiple\nchains. I think what is lacking here is a consensus on what constitutes\nhorizontal scalability. OP Chains may be co-equal in many senses, but if each of\nthem are independently ordered by a single sequencer, how actually will any\ndegree of synchronicity or seamless communication be established between them?\nDoes fragmentation = horizontal scaling? For sure there is an increase in\nmachines, but if they cannot interoperate efficiently what is to suggest they’re\na part of the same system except technical equivalence or the fact that they\neach derive security from Ethereum? I’m genuinely curious if it is notably\neasier to pass messages between 2 OP Chains or an OP Chain & an Arbitrum Orbit\nchain in the current state?\n\nIn my view, OP Chains in this case are independent systems that each execute &\norder their own transactions and settle them on Ethereum and sacrificing fraud\nproof security to decrease latency does not feel like the right solution. I also\ndon’t believe that validity proof aggregation is a superior or more performant\nsolution to a shared sequencing protocol that is sufficiently secure & handles\ncommunication across instances, potentially even synchronously depending on the\ncase.\n\nThe next point that I am unsure about is the need to commoditise layer 2s at\nall, or at least commoditise them in such a way that greatly limits their\ncapabilities. We have already learned from web 2 and from Ethereum that a\nsingle, general purpose machine does not work efficiently for all use cases &\ncan’t scale. It is clear to me that as Dapps become more expressive & demanding,\nas onchain games for example, there are many cases whereby a single rollup\ninstance will not suffice even without DA bottlenecks. It appears to me that the\nbottleneck that will remain is execution, and this is not to mention that\nSolidity & the EVM in general is already a very constrained environment.\n\nIf we want to replace centralised backends, will EVM replications that struggle\nto communicate with each other efficiently really suffice? Or should we\nencourage more experiments when it comes to the execution environment & ordering\nprotocol? Such a possibility that is afforded to us by the flexibility of\nrollups.\n\nOne case that I would like to call your attention to is that of the Arbitrum\nStylus [https://docs.arbitrum.io/stylus/stylus-gentle-introduction] alpha /\ntestnet, that leverages WASM to enable developers to write smart contracts in\nRust, Go, C++ etc. The EVM & optimistic WASM in this case are co-equal and can\ninteroperate, performance & memory are improved by an order of magnitude and\nthere are future plans to integrate this with Orbit chains.\n\nLayer N [https://docs.layern.com/] also recently announced impressive\nperformance benchmarks [https://www.layern.com/blog/nord-100k] for their Nord\nEngine [https://docs.layern.com/arn/nord], which leverages a Rust execution\nenvironment for an enhanced trading experience. Not only does performance\nincrease greatly, but the door is opened to features prevalent in centralised\nexchanges like efficient cross-margin. Each instance (whether EVM or custom\nexecution environments with specified inputs and outputs) in their ecosystem\nwill share a state & liquidity layer and interoperate seamlessly. Interestingly,\nthey plan to leverage the Risc Zero zkVM for fraud proving.\n\nAt a more abstract but similarly applicable level, Argus have taken a similar\napproach with the World Engine- by writing a custom Go state machine (also\nachieving impressive performance benchmarks\n[https://twitter.com/smsunarto/status/1712592938998624761]) and leveraging a\nshared sequencer design for cross-instance interop / horizontal scaling.\n\nThe benefits that such systems can provide are clear, and in my view would\nmeaningfully bring the Superchain closer to upgrading the web.\n\nI genuinely would love to hear your feedback and I’m also open to the fact that\nI may have pieced things together in an inaccurate way given the documentation\nthat is currently available. Perhaps there are also other resources or\nconversations happening elsewhere that I am unaware of. If so, please point me\nin that direction- I’d be extremely grateful.\n\nPlease forgive me if I am making some mistakes or misjudgments here. I just want\nto be as direct & as open as possible in a public discourse, to learn from all\nthe great minds in this community if nothing else.\n\nBeyond that, this might serve as a temperature check to understand the desire of\nthe Collective to research and discover how the capabilities of the Superchain\nmay be securely broadened in order to serve more developers & use cases.\n\nWe are happy to lead on these efforts and anyway plan to design & develop a\nsimilar architecture to those described above for our intended use cases. Our\npreference of course is doing so with the support of the Optimism Collective,\nand ensuring compatibility with the Superchain.\n\nThanks!",
  "views": 313,
  "like_count": 1,
  "word_count": 1174,
  "answer": [],
  "created_at": "2024-02-07T15:43:36.718Z"
}