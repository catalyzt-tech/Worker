{
  "title": "Upgrade Proposal #10: Granite Network Upgrade",
  "content": "EXECUTIVE SUMMARY\n\nHi I’m Mofi, a protocol engineer at OP Labs. OP Labs is a software development\ncompany focused on the Optimism ecosystem and a core developer of the OP Stack.\nWe provide some services to, but do not represent or speak on behalf of, the\nOptimism Foundation.\n\nThis upgrade is proposed in response to security vulnerabilities identified\nduring a series of third-party security audits by Spearbit, Cantina, and\nCode4rena. None of the vulnerabilities have been exploited, and user assets are\nnot and were never at risk. However, out of an abundance of caution, the\npermissioned fallback mechanism has been activated in order to avoid any\npotential instability while the vulnerabilities are patched. For more\ninformation on the permissioned fallback mechanism and the OP Stack’s\ndefense-in-depth approach to Fault Proof security, see the documentation\n[https://docs.optimism.io/stack/protocol/fault-proofs/fp-security].\n\nThe upgrade includes both a set of smart contract upgrades to fix the\nvulnerabilities identified in the audit as well as an L2 hardfork to improve the\nstability and performance of the fault proof system. In addition, we propose\nextending the capabilities of the Guardian and DeputyGuardian to set the anchor\nstate for the fault proof system in order to prevent referencing invalid anchor\nstates. Aside from implementing these fixes, the primary impact of this upgrade\nwould be to reset user withdrawals at the planned time, similar to the initial\nFault Proof upgrade.\n\n\nMOTIVATION\n\nAs described in the original upgrade proposal\n[https://gov.optimism.io/t/final-protocol-upgrade-7-fault-proofs/8161], our\nrollout strategy for Fault Proofs focuses on securing the fundamental security\nmechanisms first, then building confidence on the correctness of the rest of the\nsystem over time. Successfully performing this strategy requires that:\n\n 1. The fallback mechanisms are activated whenever there is a risk of a security\n    vulnerability.\n 2. Any vulnerabilities that may arise are swiftly patched.\n\nTherefore, the Foundation (via the Deputy Guardian role) activated the\npermissioned fallback which restricts output proposals to a trusted proposer and\nwe at OP Labs created this proposal to resolve the vulnerabilities identified by\nthe security audits. Note that the Guardian role is generally authorized to\nenforce “Safety over Liveness” in the system, meaning that it can pause and\nunpause withdrawals and as part of the Fault Proofs upgrade was authorized to\nintervene in the event that a bug would allow an invalid L2 output to be\nfinalized.\n\n\nSPECIFICATIONS\n\nThe specification for the proposed changes can be found in the specs repo\n[https://github.com/ethereum-optimism/specs]. Details of the individual audit\nissues are enumerated in the Audit Issues section below.\n\n\nTECHNICAL DETAILS\n\nIn the section below, we will summarize each of the audit issues we are fixing\nas well as the smart contracts/off-chain components affected by the upgrade. The\nfull reports for each audit can be found here:\n\n * Spearbit\n   [https://github.com/ethereum-optimism/optimism/blob/develop/docs/security-reviews/2024_08_report-cb-fault-proofs-non-mips.pdf]\n * Cantina\n   [https://github.com/ethereum-optimism/optimism/blob/develop/docs/security-reviews/2024_08_report-cantinacode-coinbase-fault-proofs-mips.pdf]\n * Code4rena [https://github.com/code-423n4/2024-07-optimism-findings]\n\nNote that this upgrade only contains the most important issues (in our opinion)\nfrom each audit. We plan on addressing other, lower-severity issues in future\nupgrades.\n\n\nAUDIT ISSUES\n\nThe table below lists all the audit issues that are fixed in this upgrade. Issue\nseverities have been updated to match the Optimism ImmuneFi bounty\n[https://immunefi.com/bug-bounty/optimism/information/]. While the auditors did\ndiscover some high severity issues, no user assets were ever at risk. All of the\naudit issues listed below can be detected by our monitoring tooling. Had an\nexploit been detected, the Deputy Guardian role - which is held by the Optimism\nFoundation and revocable by the Security Council - would have been expected to\nblacklist any exploitable dispute games or activate the permissioned fallback.\n\nNote that we have updated the spec to clarify some assumptions around the Cannon\nVM and program. Specifically, we trust that the Go compiler will emit proper\nMIPS32 programs. As a result, the Cantina issues that reference problems related\nto invalid MIPS32 programs are considered out-of-scope and will not be fixed.\n\nUnless otherwise noted, vulnerabilities in the dispute game all occur at\nMAX_GAME_DEPTH and are therefore classified as medium.\n\nIssue ID Severity Summary Cantina 3.1.1: Allocation overflow could allow for\narbitrary code execution High Mmap calls did not perform memory bounds checking,\nwhich allowed memory pointers to wrap around to zero and access the entire\nmemory of the fault proof program including the data and text sections of active\nMIPS programs. This could lead to arbitrary code execution within the VM,\neffectively breaking the VM’s correctness guarantees. No PoC was given, and it\nis our belief that such an exploit is infeasible due to memory protections\nemployed by the Go runtime. Nevertheless, given the potential impact of the\nissue we worked with the auditors to classify this as a high severity issue and\ndeploy a fix. C4 H-01: Invalid DISPUTED_L2_BLOCK_NUMBER is passed to VM High An\nattacker can counter a valid output claim by providing a trace containing one\nblock after the original claim. For example, if an output root is proposed for\nblock 13, the attacker could counter using a trace that includes valid blocks up\nto block 14. This issue is classified as high severity since it occurs above\nMAX_GAME_DEPTH. Spearbit 5.1.1: PreimageOracle.loadPrecompilePreimagePart an\noutOfGas error in the precompile will overwrite correct preimageParts Medium See\nsection below. C4 H-02: The LPP challenge period can cause malicious and\nfreeloader claims to be uncounterable and can also cause freeloader claims to be\nabused to entrap honest challengers Medium The clock extension mechanism is\ndesigned to give an honest actor time to counter freeloader claims, even though\nin that case they will inherit the opposing chess clock which may have very\nlimited time remaining. Since the LPP challenge period was longer than the clock\nextension period, the clock extension granted in that case would not be\nsufficient to allow the honest actor to complete a call to step. While the\noverall game still resolves correctly, the challenger would lose bonds posted in\nattempting to counter the freeloader claim. C4 H-05: An attacker can bypass the\nchallenge period during LPP finalization Medium An attacker can bypass the large\npreimage challenge period by calling addLeavesLPP with _finalize set to false.\nSince the challenge period timestamp is never set, attackers can then call\nsqueezeLPP, thereby bypassing the challenge period and inserting invalid data\ninto the preimage oracle. Cantina 3.3.5: Wrong implementation of srav Low The\nsrav instruction does not mask the 5 lower bits of rs, which is nonconformant\nwith the MIPS specification. This could lead to undefined behavior. Cantina\n3.4.2: Location of registers array in memory should be verified Low The on-chain\nMIPS VM does not verify that the registers array is allocated right after the\nstate struct. Validating this would make the code more defensive. Spearbit\n5.2.5: Preimage proposals can be initialized multiple times Low initLPP() does\nnot check if a proposal already exists. This could lead to loss of funds if a\nuser provides the same LPP UUID multiple times. Spearbit 5.2.3: Extension period\nnot applied correctly for next root when SPLIT_DEPTH is set to 1 or less Low\nWhen SPLIT_DEPTH is set to 1, the extension period for the next root is\ncalculated as zero which results in no extension period being applied. If\nSPLIT_DEPTH is set to zero, subsequent game moves will result due to an integer\nunderflow. Spearbit 5.1.2: Invalid Ancestor Lookup Leading to Out-of-Bounds\nArray Access Low An out of bounds array access can occur when MAX_DEPTH =\nSPLIT_DEPTH + 1. While this is unlikely to happen in practice, we have updated\nthe FDG constructor to require that SPLIT_DEPTH + 1 >= MAX_GAME_DEPTH. Spearbit\n5.2.4: Inconsistent _partOffset check and memory boundaries in loadLocalData\nfunction Low The _partOffset parameter is handled inconsistently in some places\nwithin the loadLocalData function. Spearbit 5.2.6: _clockExtension and\n_maxClockDuration are not validated correctly in DisputeGame constructor Low If\na dispute game is initialized with a clock extension set to more than half of\nthe max duration, move transactions during the execution trace bisection will\nrevert since the difference between 2 * the clock extension and the game’s max\nduration will underflow.\n\n\nNOTES ON SPEARBIT 5.1.1\n\nBy calling loadPrecompilePreimagePart with less gas than necessary, an attacker\ncould produce an outOfGas error in the precompile. If there is enough gas left\nin the loadPrecompilePart function, a valid preimage could be overwritten with\nthe outOfGas error itself. This would result in an incorrect game outcome.\n\nThe function of the loadPrecompilePreimagePart method is to allow certain\nexpensive precompiles - namely ecrecover, ecpairing, and kzg_point_evaluation -\nto be accelerated. Accelerated precompiles offload their execution to an L1\noracle. Since precompiles are implemented natively rather than via EVM opcodes,\nthis improves Cannon’s performance and allows challengers to quickly generate\ntraces for blocks filled with these computationally expensive calls. To address\nthe outOfGas issue, we’re adding a minimum gas requirement to the PreimageOracle\nto ensure there’s enough gas to accelerate precompiles on L1.\n\nAnother related issue with loadPrecompilePreimagePart is that the gas required\nto accelerate precompiles on L1 may be insufficient given the cost of executing\nthem on L2. This is because the gas provided to the precompile accelerator\ncontract on L1 can never exceed 63/64th of the gas limit on L2. This is a\nproblem for precompiles that have a dynamic gas cost of execution. Of the\naccelerated precompiles, ecPairing is the only one that contains this\nvulnerability as its gas cost scales with its input size.\n\nTo fix this problem, we are proposing an L2 hardfork to limit the maximum input\nsize provided to the ecPairing precompile to 112687 bytes. This number is high\nenough to enable all known use cases of the ecPairing precompile, but low enough\nto enable the challenger to generate traces for larger blocks in a timely\nmanner. While this is technically a divergence from the EVM, our on-chain data\nhas found no calls to the ecPairing precompile with an input size over 1187\nbytes. The provided limit is therefore 2 orders of magnitude larger than any\nknown use case, which we believe is sufficiently safe.\n\n\nADDITIONAL FIXES\n\nIn addition to the audit fixes above, we are also proposing the following\nadditional fixes:\n\n 1. We propose reducing the ChannelTimeout value from 200 blocks to 50. Canon\n    has a limited amount of memory - approximately 1.1GB - and is not currently\n    garbage collected. The longer channel timeout caused Cannon to run out of\n    memory on OP Sepolia, and was close to the limit on mainnet. Reducing the\n    ChannelTimeout significantly increases the amount of memory available to\n    Cannon and reduces the risk of an OOM occurring.\n 2. An ImmuneFi bounty hunter noticed that DelayedWETH’s recover function is not\n    robust against transfers which need more than 2300 gas. We propose modifying\n    DelayedWETH such that the owner can always recover funds regardless of how\n    much gas is required.\n 3. As a result of falling back to the permissioned game, we realized that\n    switching back to the permissionless game could in theory cause the anchor\n    state to reference an old state prior to the switch to the permissioned\n    game. To remedy this, we have updated the Guardian and DeputyGuardian roles\n    to have the permission to set the anchor state.\n\nAll proposed contract changes can be found in the op-contracts/v1.6.0 release\n[https://github.com/ethereum-optimism/optimism/tree/op-contracts/v1.6.0-rc.1].\n\n\nIMPACTED COMPONENTS\n\nThis upgrade involves both L1 smart contracts as well as the node and execution\nclient software.\n\nThe following contracts are modified as part of this upgrade:\n\n * On-Chain MIPS VM:\n   * MIPS.sol\n   * PreimageOracle.sol\n * Dispute Game\n   * FaultDisputeGame.sol\n   * PermissionedDisputeGame.sol\n * DelayedWETH.sol\n * DeputyGuardianModule.sol\n * AnchorStateRegistry.sol\n\nOP Node has been updated to process the reduced ChannelTimeout. OP Geth has been\nupdated to limit the maximum input size to ecPairing.\n\n\nSECURITY CONSIDERATIONS\n\nThese changes are all in response to vulnerabilities discovered during external\nsecurity audits. No vulnerabilities were found in the fallback mechanisms, which\nwere themselves audited [https://audits.sherlock.xyz/contests/205/report] prior\nto deploying Fault Proofs in June.\n\nAs per the Audit Framework\n[https://gov.optimism.io/t/op-labs-audit-framework-when-to-get-external-security-review-and-how-to-prepare-for-it/6864],\nthe dispute game and MIPS contracts fall into the liveness/reputational risk\ncategory which do not require audits. The fallback mechanisms make any bugs\nsimple to recover from and pose no risk to user funds. Therefore, we have opted\nnot to pursue a fix review for the changes made in this proposal. We propose\naddressing any additional issues discovered in a similar manner to the way they\nare being addressed here, specifically:\n\n 1. Depending on the issues at hand, Labs recommend that the Deputy Guardian\n    trigger the fallback or blacklist specific dispute games.\n 2. Labs or (others in the core developer community) would create a governance\n    proposal to resolve the issues.\n\nThere’s quite a bit of nuance to when the fallbacks should be activated. In\nlight of this audit, we propose adopting the following rubric to decide if/when\nthe fallback should be activated. If an issue is costly to exploit - e.g., it\nrequires playing the game to MAX_GAME_DETH - then we propose disclosing it\nimmediately and using the dispute game blacklist to mitigate any attempts to\nexploit it. The dispute game blacklist will seize any bonds paid by an attacker,\nand makes attempting to exploit dispute resolution deeply unprofitable. On the\nother hand, if issues are not costly to exploit then we propose activating the\nfallback prior to disclosure. In both cases, fixes for the vulnerabilities would\nbe proposed as a regular protocol upgrade in the nearest voting cycle.\n\nConsistent with the OP Labs Audit Framework\n[https://gov.optimism.io/t/op-labs-audit-framework-when-to-get-external-security-review-and-how-to-prepare-for-it/6864],\nwe have not had the contents of the hardfork audited. However, OP Labs did\nperform a security review of these changes. Risk analysis of each L2 change is\nbelow.\n\n * Limiting the size of ecPairing’s input is considered a low-risk change.\n   Implementation bugs would not put user assets at risk. Even though this is\n   technically a divergence from the EVM, our data suggests that there have been\n   no usages of the ecPairing precompile with an input size > 1152 bytes, which\n   is far below the limit we will be imposing.\n * Reducing the ChannelTimeout is considered a low-risk change. Implementation\n   bugs would not put user assets at risk.\n\n\nIMPACT SUMMARY\n\n * OP Labs does not anticipate any downtime due to this upgrade.\n * If this proposal is approved, node operators must upgrade their node software\n   prior to September 11th in order to avoid a chain split.\n * As a result of triggering the fallback, all pending withdrawals will be\n   invalidated. Users with pending withdrawals will need to re-prove them\n   against an output proposal submitted by the permissioned proposer. This means\n   that withdrawals initiated less than one week before the upgrade is executed\n   will only be finalized one week after the upgrade is complete. For example, a\n   withdrawal initiated 6 days before the upgrade would take a total of 13 days\n   to finalize. In addition, proposals made within a week of the permissionless\n   game being reactivated will also be invalidated.\n * Users will be unable to provide more than 112687 bytes of input to the\n   ecPairing precompile.\n * Proposers (other than the trusted proposer operated by OP Labs) will be\n   unable to propose their own outputs until the fallback is deactivated\n   following the L1 upgrades.\n * All client-side tooling is unaffected.\n\n\nACTION PLAN\n\nIf this vote passes, the Granite upgrade will be scheduled for execution on\nSeptember 10th at 16:00:01 UTC. The upgrade will occur automatically for nodes\non a release which contains the baked-in activation time. Granite is code\ncomplete in the optimism monorepo at commit\na81de910dc2fd9b2f67ee946466f2de70d62611a and op-geth at commit\n0f5b9dcfd2ac66f6fd8faae526b1549721f5f392. The smart contracts release is\nop-contracts/v1.6.0-rc.1. The op-node and op-geth releases will be finalized if\nthis proposal passes.\n\nThis upgrade has already been activated on internal devnets and the Sepolia\nSuperchain in coordination with Base and Conduit.\n\nThe overall upgrade plan is as follows:\n\n 1. Update the Absolute Pre-State: Prior to the hardfork activation, we will\n    update the absolute pre-state as done in the Fjord upgrade. This ensures\n    that the new op-program can be used with the upgraded protocol, and must be\n    performed prior to hardfork activation. See the Fjord upgrade proposal\n    [https://gov.optimism.io/t/upgrade-proposal-9-fjord-network-upgrade/8236]\n    for more details. This upgrade is transparent to users, and no action is\n    required.\n 2. Activate the Hardfork on L2: The hardfork will activate on the L2 network at\n    the scheduled time. Node operators must upgrade to the versions described\n    above to avoid a chain split. Once upgraded, no further action is required.\n 3. Update the L1 Smart Contracts: Finally, we will update the L1 smart\n    contracts to new versions that contain fixes for the audit issues. This\n    upgrade is transparent to users, and no action is required. This update will\n    also deactivate the fallback mechanism, and revert back to permissionless\n    proposing.\n\nThe Security Council and Optimism Foundation must sign the transactions for\nsteps 1 and 3 prior to the hardfork activation. This sequence is crucial to\nprevent breaking the fault proof system.\n\n\nEMERGENCY CANCELLATION\n\nThe releases above will contain a Granite activation at the above-mentioned\ntime. If a critical security issue is found between approval and rollout, the\nOptimism Foundation and Security Council should coordinate an emergency\ncancellation. Node operators can quickly react by using the --override.granite\nflag on both op-node and op-geth.\n\n\nCONCLUSION\n\nThis proposal outlines the Granite network upgrade, which responds to security\nvulnerabilities identified by third-party auditors. This upgrade brings better\nsecurity and performance to the fault proof system.",
  "views": 299,
  "like_count": 9,
  "word_count": 3549,
  "answer": [
    {
      "content": "I am an Optimism delegate\n[https://gov.optimism.io/t/delegate-commitments/235/18] with sufficient voting\npower and I believe this proposal is ready to move to a vote.",
      "created_at": "2024-08-16T20:53:12.697Z",
      "trust_level": 3,
      "username": "katie",
      "admin": false,
      "moderator": false,
      "staff": false,
      "like_count": 1
    },
    {
      "content": "There have been a number of proposals already made with the permissioned game\ntype (about one an hour as was done with the permissionless games). The\nAnchorStateRegistry is only updated once the dispute period for games has\nelapsed and the game resolves as Defender Wins. It’s then used as the starting\npoint for new games after that. Having an old anchor state just means there are\nmore blocks that could be disputed in the top half of the dispute game which\nnarrows down to find the first disputed block.",
      "created_at": "2024-08-17T06:34:12.948Z",
      "trust_level": 3,
      "username": "ajsutton",
      "admin": false,
      "moderator": false,
      "staff": false,
      "like_count": 1
    },
    {
      "content": "There’s no need to adjust the anchor state. It doesn’t affect withdrawals at all\nand will just naturally be updated when the next game resolves.",
      "created_at": "2024-08-17T07:01:11.570Z",
      "trust_level": 3,
      "username": "ajsutton",
      "admin": false,
      "moderator": false,
      "staff": false,
      "like_count": 1
    },
    {
      "content": "This seems like a highly technical upgrade so though the post makes sense I\ncan’t say I myself can say it’s all fine.\n\nI will trust the auditors and developers here and just give the okay as a\ndelegate for this to go to a vote.\n\nI am an optimism delegate [https://vote.optimism.io/delegates/lefteris.eth] with\nsufficient voting power and I believe the proposal is ready to move to a vote.",
      "created_at": "2024-08-16T21:41:23.741Z",
      "trust_level": 2,
      "username": "lefterisjp",
      "admin": false,
      "moderator": false,
      "staff": false,
      "like_count": 1
    },
    {
      "content": "Seems a reasonable upgrade to address the vulnerabilities of the security audits\nand prioritize user safety/reinforce the fault proof system.\n\nI am an Optimism delegate [https://vote.optimism.io/delegates/0xdonpepe.eth]with\nsufficient voting power and I believe this proposal is ready to move to a vote.",
      "created_at": "2024-08-16T22:34:35.122Z",
      "trust_level": 2,
      "username": "0xDonPepe",
      "admin": false,
      "moderator": false,
      "staff": false,
      "like_count": 1
    }
  ],
  "created_at": "2024-08-16T19:09:51.063Z"
}