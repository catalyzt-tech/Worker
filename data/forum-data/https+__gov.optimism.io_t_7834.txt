{
  "title": "Enable Custom Gas Token on OP Stack",
  "content": "1.SUMMARY\n\nThis proposal from BNB Chain Core Team to allows Layer 2 networks that build on\nOP Stack to define its own gas token independently, instead of being limited to\nLayer 1’s gas token.\n\n\n2.ABSTRACT\n\nIn the Ethereum Virtual Machine (EVM), a transaction call can be simply\nrepresented as a tuple {from, to, value, data, gaslimit}. OP Stack has\nimplemented a seamless cross-chain transaction call between L1 and L2 layers: A\ntransaction call happens on the source chain and will be fully executed on the\ntarget chain. Introducing the custom gas token will fundamentally change the\nmeaning of the value field in the tuple: the different gas tokens on L1 and L2\nmean that the value of gas tokens is no longer equal. By adjusting the token\nhandling logic in the cross-chain communication layer(Portal and\nL2toL1MessagePasser), OP Stack can keep the semantic of cross-chain transaction\ncalls the same, reducing the impact on other components.\n\nThe fee of cross-chain transactions is influenced by custom gas tokens due to\nthe different prices of gas tokens. By implementing a token price oracle and\nconsidering token prices for fee calculations, the system can still maintain\nfinancial balance even if the income and expenses are two distinct tokens.\n\n\n3.MOTIVATION\n\nMany projects aspire to deploy their own layer2 or even layer3 solutions for\nvarious reasons:\n\n 1. Low Transaction Fees: Scenarios like GameFi, SocialFi, and DEX platforms\n    demand extremely cost-effective transaction fees.\n 2. Customized Chain Requirements: Projects often require customized features\n    and rapid iterations such as precompiled contracts, shorter block times, and\n    customized Abstract Account solutions.\n\nThey often want to enhance project value by issuing tokens that can serve as gas\ntokens on Layer 2. However, OP Stack currently lacks support for this feature.\nTherefore, this draft focuses on enabling custom gas tokens on the OP Stack\ncodebase.\n\n\n4.SPECIFICATION\n\n\n\n[https://europe1.discourse-cdn.com/bc41dd/optimized/2X/3/3e9f3095ae1284df5723e70700a5e44e8a028f81_2_624x188.png]\n828×250 21.7 KB\n[https://europe1.discourse-cdn.com/bc41dd/original/2X/3/3e9f3095ae1284df5723e70700a5e44e8a028f81.png]\n\n\n\nThe current OP Stack’s cross-chain communication follows a layered model\ncomprising application layer and communication layer.\n\n\n4.1 COMMUNICATION LAYER\n\nThe communication layer is accessible without permission. Developers can build\ntheir cross-chain applications on this communication layer, and native Token\nBridge is one of the applications.\n\nThe communication layer is primarily responsible for two key functions.：\n\n 1. Implement cross chain transaction calls. This is achieved through the\n    collaboration of Portal, MessagePasser contracts on two chains, along with\n    op-node. The cross chain call can be represented as {from, to, mintValue,\n    value, data, gaslimit}, the mintValue means the amount of minted L2 gas\n    token when deposit to L2, the value means the the transfer amount of L2 gas\n    token to the to account.\n 2. Verification of Cross-Chain messages. In the process of L1 to L2, the\n    op-node observes the events on L1 and includes deposit transactions into\n    blocks, verification passes only if it can reach state consensus. The tx\n    from L2 to L1 is verified through Merkel proofs and fraud proofs.\n\nThe introduction of custom gas tokens mainly impacts the ‘value’ field in\ncross-chain transaction calls. To remove ambiguity about the “value” on both\nchains, we get two options here.\n\n4.1.1 OPTION1: ENHANCE CROSS CHAIN TRANSACTION CALL\n\nA cross-chain transaction call can be represented as：{from, to, mintValue,\nValue, remoteMintValue, remoteValue, data, gaslimit}. remoteMintValue and\nremoteValue refer to the amount of gas token on another chain in a cross-chain\ntransaction. The Portal, MessagePasser and also the EVM need to adapt to this\nchange to handle the remote tokens.\n\nFor example, the depositTransaction of Portal need to charge the _remoteValue of\ncustom gas token in ERC20 format, the logic will be like:\n\nScreenshot 2024-03-19 at 5.14.04 PM\n[https://europe1.discourse-cdn.com/bc41dd/original/2X/a/ac3f9218e90300f86d69469de87c8c2202ecdee1.png]\n\nOn the other hand, when the L2 EVM handles the DepositTx, it will require to\nmint the L1 gas token on L2 in ERC20 format and transfer to the target account.\nThese happen during the EVM transaction pre-execution phase, not within smart\ncontracts.\n\n4.1.2 OPTION2: WRAP CROSS CHAIN TRANSACTION CALL\n\nFor L1 to L2 transaction calls, invoking Portal\n[https://github.com/ethereum-optimism/optimism/blob/8ed039b418f6531684a2d40eb515269c3895aa81/packages/contracts-bedrock/src/L1/OptimismPortal.sol#L373]\nwith msg.value is no longer allowed, a new parameter ‘mintValue’ will be\nintroduced. The Portal needs to transfer the mintValue amount of L2 custom gas\ntoken in ERC20 format from msg.sender to itself. The previous opaqueData =\nabi.encodePacked(msg.value,_value,_gasLimit,_isCreation,_data) should be change\nto opaqueData = abi.encodePacked(‘mintValue’,_value,_gasLimit,_isCreation,_data)\nin the Portal contract.\n\nFor L2 to L1 transaction calls, invoking L2toL1MessagePasser\n[https://github.com/ethereum-optimism/optimism/blob/8ed039b418f6531684a2d40eb515269c3895aa81/packages/contracts-bedrock/src/L2/L2ToL1MessagePasser.sol#L79]\nwith msg.value is no longer allowed, a new parameter ‘callValue’ will be\nintroduced. The L2toL1MessagePasser needs to transfer the callValue amount of L1\ngas token in ERC20 format from msg.sender to itself. The WithdrawalTransaction\nin L2toL1MessagePasser will be changed from { nonce: messageNonce(), … value:\nmsg.value…} to { nonce: messageNonce(), … value: callValue…}\n\n4.1.3 COMPARISON\n\nOption1’s framework is clearer but will require changes across multiple modules,\nincluding op-node and EVM. Option 2 is a simple and lightweight solution,\nhowever, its capability is slightly weaker than option 1. Overall, the\narchitecture of option1 is better .\n\n\n4.2 APPLICATION LAYER\n\nThe Messenger and Bridge modules together form the entire application, enabling\ntokens to flow freely between two chains. Messenger manages message nonces and\nfailure retry mechanisms. Bridge acts as the gateway, providing user interfaces\nand managing token mapping relationships.\n\nThe introduction of custom gas primarily impacts the Bridge module in two\naspects:\n\n 1. interfaces changed; Introduce two new interfaces depositGasToken and\n    withdrawGasToken to reduce confusion, along with their corresponding\n    finalize interface on the other chain.\n 2. the processing logic of gas tokens on both chains changed. Because the gas\n    token is an ERC20 token on the other chain, this part should be properly\n    handled.\n\n\n4.3 L1 TO L2 FEE\n\nWhen a user initiates a deposit transaction on Layer 1 and specifies a gas\nlimit, this transaction will ensure that an equivalent amount of gas limit is\nexecuted or burned on Layer 1 as a form of fee charge. This mechanism serves to\nprevent DoS attacks on Layer 2 through cross-chain transactions.\n\nIf L2 adopts the custom gas token solution, there will be no need to charge fees\nby burning gas tokens on L1. When the gas limit exceeds a certain threshold, an\namount of gaslimit * L2 base fee of L2 custom gas token will be transferred from\nthe user’s account to a treasury account in ERC20 format. In the ResourceConfig\ncontract of L1, there are two parameters: minimumBaseFee and maximumBaseFee. By\nconsidering the prices of two gas tokens, setting these two parameters\nappropriately can make gaslimit * L2 base fee approximately equal to the cost of\nexecuting this transaction on L2. The operator of L2 subsequently has the\nauthority to withdraw L2 custom gas tokens from the treasury.\n\n\n4.4 L2 TO L1 FEE\n\nWhen users send transactions on L2, they are required to pay an L1Fee to cover\nthe costs of DA and fixed overhead. The calculation formula for L1Fee is: L1Fee\n= L1GasUsed * L1GasPrice * FeeScalar. The L1GasUsed is related to the length of\ntransaction raw data and compression rate.\n\nConsidering the different prices of gas tokens on two chains, a new operator\nwill be introduced: TokenPriceRatio. The formula will be:\n\nL1GasPrice = L1GasPrice * TokenPriceRatio\n\nL1Fee = L1GasUsed * L1GasPrice * FeeScalar\n\nHowever, the value of TokenPriceRatio cannot be automatically calculated by the\nsystem; it requires an Oracle mechanism where an off-chain service feeds the\nprice into the L2 contract. Price feeds come in different forms and algorithms,\nOP Stack can leave it to the maintainer of L2. Even if the price feed lags or is\ninaccurate, it won’t cause major financial losses, but may create an imbalance\nbetween income and expenses in a short period.\n\n\n4.5 WRAP GAS TOKEN\n\nSince the gas token is a wrapped ERC20 token on another chain, the ERC20 needs\nto be deployed in advance and maintained as globally unique. Typically, the gas\ntoken wrapped in L1 already exists, so all that’s required is to pre-deploy the\nERC20 format contract of the L1 gas token on L2. The issue of other L2 tokens\nremains unchanged.",
  "views": 1130,
  "like_count": 4,
  "word_count": 1462,
  "answer": [
    {
      "content": "\n[https://dub1.discourse-cdn.com/bc41dd/user_avatar/gov.optimism.io/bnbchaincore/48/8419_2.png]\nBNBChainCore:\n\n> The communication layer is primarily responsible for two key functions.：\n\nWouldn’t this further complicate the existing proposal allowing users to switch\ntheir L1 Gas token from ETH to OP? and or should this possibly beneficial option\nbe considered once the core ETH/OP gas token topic is decided upon?",
      "created_at": "2024-07-31T13:55:44.659Z",
      "trust_level": 2,
      "username": "Rods2000",
      "admin": false,
      "moderator": false,
      "staff": false,
      "like_count": 0
    },
    {
      "content": "What are the dependencies here? Is there another proposal that needs to pass\nfirst?",
      "created_at": "2024-07-11T13:08:34.481Z",
      "trust_level": 0,
      "username": "TomaszW",
      "admin": false,
      "moderator": false,
      "staff": false,
      "like_count": 0
    },
    {
      "content": "No dependencies, I believe",
      "created_at": "2024-07-30T07:37:59.402Z",
      "trust_level": 0,
      "username": "zhaojimmy",
      "admin": false,
      "moderator": false,
      "staff": false,
      "like_count": 0
    }
  ],
  "created_at": "2024-03-19T09:29:52.073Z"
}