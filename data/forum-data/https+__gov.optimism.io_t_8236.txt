{
  "title": "Upgrade Proposal #9: Fjord Network Upgrade",
  "content": "EXECUTIVE SUMMARY\n\nHi I’m Roberto, an engineer at Coinbase working on the Base blockchain, and a\ncore developer of the OP Stack. I reviewed this proposal in collaboration with\nSebastian Stammler and Dragan Zurzin from the OP labs team.\n\nNeither Coinbase nor I represent or speak on behalf of the Optimism Foundation.\n\nThis is a proposal for the Fjord network upgrade, which includes the EIP-7212\nprecompile to reduce gas costs of many smart wallet applications, supports\nBrotli batch compression for ~5-15% lower data availability costs, and improves\nthe robustness of L1 data pricing. The upgrade also increases and hardcodes the\nmax-sequencer-drift parameter, giving chain operators more time to respond to L1\nnode issues without facing a potential L2 chain halt.\n\n\nSPECIFICATIONS\n\n\nTECHNICAL SPECIFICATION\n\nWe propose the Fjord network upgrade (spec overview\n[https://github.com/ethereum-optimism/specs/blob/main/specs/fjord/overview.md]),\nwhich activates:\n\n * RIP-7212 [https://github.com/ethereum/RIPs/blob/master/RIPS/rip-7212.md]:\n   Precompile for secp256r1 Curve Support (spec\n   [https://github.com/ethereum/RIPs/blob/master/RIPS/rip-7212.md])\n * Brotli as a channel compression option (spec\n   [https://github.com/ethereum-optimism/specs/blob/main/specs/fjord/derivation.md#brotli-channel-compression])\n * FastLZ based L1 data availability cost calculation (spec\n   [https://github.com/ethereum-optimism/specs/blob/main/specs/fjord/exec-engine.md#fees]),\n   including an upgraded GasPriceOracle L2 predeploy to compute it (spec\n   [https://github.com/ethereum-optimism/specs/blob/main/specs/fjord/derivation.md#gaspriceoracle-deployment]).\n * Parameter changes:\n   * Max sequencer drift becomes a constant with value increased to 1800 seconds\n     (spec\n     [https://github.com/ethereum-optimism/specs/blob/main/specs/fjord/derivation.md#constant-maximum-sequencer-drift])\n   * Increased values for MAX_RLP_BYTES_PER_CHANNEL and MAX_CHANNEL_BANK_SIZE\n     (spec\n     [https://github.com/ethereum-optimism/specs/blob/main/specs/fjord/derivation.md#increasing-max_rlp_bytes_per_channel-and-max_channel_bank_size])\n * The Fjord hardfork activation block, which includes several transactions to\n   perform all L2 contract deployments, upgrades, enablements, and proxy\n   updates. (spec\n   [https://github.com/ethereum-optimism/specs/blob/main/specs/fjord/derivation.md#network-upgrade-automation-transactions])\n\nThe upgrade also updates and deprecates:\n\n * getL1GasUsed method of the GasPriceOracle contract (spec\n   [https://github.com/ethereum-optimism/specs/blob/main/specs/fjord/predeploys.md#l1-gas-usage-estimation])\n * L1GasUsed field of the transaction receipt (spec\n   [https://github.com/ethereum-optimism/specs/blob/main/specs/fjord/exec-engine.md#l1-gas-usage-estimation])\n\n\nSECURITY CONSIDERATIONS\n\nConsistent with the OP Labs Audit Framework\n[https://gov.optimism.io/t/op-labs-audit-framework-when-to-get-external-security-review-and-how-to-prepare-for-it/6864],\nwe did not have the contents of Fjord audited; however, Coinbase and OP Labs\nengineers did perform a security review of these changes.\n\nThe Fjord upgrade’s inclusion of EIP-7212 involves use of the reference\nimplementation that is already live on other blockchains, which we consider low\nrisk.\n\nBrotli compression is also a low-risk change since it is already used by other\nL2s and was evaluated for both its runtime performance and compression\nimprovements across four different OP-stack chains. It’s usage is also optional\nand must be activated by the chain operator after the upgrade in order to be\napplied.\n\nThe introduction of the new L1 data fee cost function required updates to the\nGasPriceOracle L2 predeploy, and changes op-geth to compute the fee values. The\ncontract extension allows developers to continue using the GasPriceOracle to\ncompute the data fee, and affects only helper functions that are outside of\nconsensus. We extensively evaluated the accuracy of this new function compared\nto multiple variants as well as the previous one across various timeslices of OP\nmainnet and Base mainnet transactions (analysis repo\n[https://github.com/roberto-bayardo/compression-analysis]). The new function\nconsistently produced significant improvements in mean-squared-error and\nmean-absolute-error across each, and we were unable to find any instances where\nthe new function could wildly diverge from ground truth. (We computed ground\ntruth by putting the transaction in a simulated batch, compressing the entire\nbatch with Brotli-10, and returning the number of bytes occupied by the\ntransaction in the result.) Bugs in the op-geth computation might still lead to\nunder/over payment for L1 data fees by users. Significant underpayment could\nresult in revenue loss for the chain operator, but the system provides\nparameters that can be updated quickly via the SystemConfig in order to quickly\ncompensate for such scenarios. Overall we feel this change remains low risk.\n\nSimilar to the previous upgrade, Fjord uses a special upgrade block to perform\nthe contract deployment and activation on the L2. Bugs in this code could lead\nto an incomplete fork with missing contracts or contract functionality expected\nby the upgrade, in the worst case leading to chain halt. Since this approach to\nautomating the upgrade has been used successfully in the past, we consider this\nlow risk.\n\nSecurity considerations for the parameter changes are discussed in the upgrade\nspecification here\n[https://github.com/ethereum-optimism/specs/blob/main/specs/fjord/derivation.md#security-considerations]\nand here\n[https://github.com/ethereum-optimism/specs/blob/main/specs/fjord/derivation.md#security-considerations-1].\nThese changes are also straightforward and we consider them low risk.\n\n\nIMPACT SUMMARY\n\nWe do not anticipate any downtime due to this upgrade.\n\nBringing EIP-7212 to the OP stack will benefit applications such as smart\nwallets that want to support many common authentication methods (such as Apple’s\nFaceID) that would otherwise be too gas intensive.\n\nWe evaluated Brotli compression compared to the previous compression algorithm\n(zlib) on 4 OP stack chains (OP mainnet, Base, Zora, and Mode) and found\ncompression ratio improvements ranging from 5-15% under Brotli quality level 10.\nThis will directly translate to a 5-15% reduction in L1 data availability costs,\nso we expect most chains will want to activate this feature immediately\nfollowing the upgrade.\n\nThe FastLZ based L1 data fee function will more accurately charge for L1 data\nusage on a per transaction basis. Previously, highly incompressible transactions\nmight be undercharged for L1 data usage, and a large number of such transactions\nmight lead to an inability to recover revenue without the chain operator having\nto take action by re-tuning fee parameters. We expect this new function to far\nmore accurately detect the (lack of) compressibility of each individual\ntransaction and reduce the chance of revenue recovery drifting from its intended\ntarget.\n\nThe main impact of the parameter changes is that chain operators will have more\ntime to respond to L1 node outage issues before the L2 chain stalls (30 minutes\ninstead of 10 minutes).\n\n\nACTION PLAN FOR THIS RELEASE\n\nIf this vote passes, the Fjord upgrade will be scheduled for execution on July\n10th at 16:00:01 UTC. The upgrade will occur automatically for nodes on a\nrelease which contains the baked in activation time. Fjord is code complete in\nthe optimism monorepo at commit f8143c8cbc4cc0c83922c53f17a1e47280673485 and\nop-geth at commit 7c2819836018bfe0ca07c4e4955754834ffad4e0. The op-node release\nv1.7.7 [https://github.com/ethereum-optimism/optimism/releases/tag/v1.7.7] and\nop-geth release v1.101315.2\n[https://github.com/ethereum-optimism/op-geth/releases/tag/v1.101315.2] contain\nthese changes.\n\nThis upgrade has already been activated on internal devnets and the Sepolia\nSuperchain in coordination with Base and Conduit.\n\n\nFAULT PROOFS UPDATE\n\nThis is the first protocol upgrade that will activate on mainnet following the\nlaunch of Fault Proofs, which has recently been accepted by governance\n[https://gov.optimism.io/t/final-protocol-upgrade-7-fault-proofs/8161/18].\nHowever, its version of the op-program and Fault Dispute Game doesn’t contain\nthe Fjord mainnet activation yet, so we need to perform an update of the Fault\nProofs L1 infrastructure before the Fjord activation on mainnet. This is the\nfirst time that we need to perform this exercise.\n\nThis update involves a new release of the op-program (v1.2.0\n[https://github.com/ethereum-optimism/optimism/releases/tag/op-program%2Fv1.2.0])\nthat contains the Fjord activation and generate the so-called absolute pre-state\nfor it, which is a commitment to the program and its starting state. It also\nrequires deploying new FaultDisputeGame and PerimissionedDisputeGame contracts\nto L1 Mainnet with the new op-program pre-state hash. These are deployed at\naddresses 0xf691F8A6d908B58C534B624cF16495b491E633BA\n[https://etherscan.io/address/0xf691F8A6d908B58C534B624cF16495b491E633BA] and\n0xc307e93a7c530a184c98eade4545a412b857b62f\n[https://etherscan.io/address/0xc307e93a7c530a184c98eade4545a412b857b62f]\nrespectively. After the veto period has ended, we will ask the Security Council\nto sign transactions to update the DisputeGameFactory to begin using these new\ncontract implementations. This transaction has to be executed before the actual\nFjord activation to avoid a broken Fault Proofs system after the activation.\n\n\nEMERGENCY CANCELLATION\n\nThe optimistic mainnet releases will contain a Fjord activation at the above\nmentioned time. If there is a critical security issue found between approval and\nrollout, the Optimism Foundation and Security Council will work to coordinate an\nemergency cancellation. We have included functionality for node operators to\nquickly react by using the --override.fjord flag on both op-node & op-geth.\n\n\nCONCLUSION\n\nThis proposal outlines the network upgrade after Ecotone titled Fjord. This\nnetwork upgrade brings reduced execution fees for certain (e.g. smart wallet)\napplications, lower data availability costs, and more robust L1 data pricing. We\nexpect that this upgrade will not result in any downtime and will occur on\nWednesday, July 10 2024 at 16:00:01 UTC.",
  "views": 3276,
  "like_count": 110,
  "word_count": 3861,
  "answer": [
    {
      "content": "On behalf of the Developer Advisory Board, here is a non-technical summary of\nthis upgrade proposal:\n\nThe Fjord upgrade packages together five changes that are somewhat related, but\ncan be considered separately for simplicity.\n\n1) secp256r1 Precompile\n\nYour phone actually has its own private key. It’s hardcoded in there and is\ninaccessible, except when you present biometric data like a thumbprint or\nFaceID. If it was on the secp256k1 curve, your phone would be able to have a\nbuilt in Ethereum wallet.\n\nBut it’s on a different cryptographic curve called secp256r1. That means that if\nyour phone signs something with its private key, it’s not an Ethereum signature.\nIt can’t send a transaction on chain. But it can be verified on chain that it\nwas your phone that signed it! It would just cost a lot of gas to do it.\n\nThis upgrade implements a precompile contract at the address\n0x0000000000000000000000000000000000000100. This contract allows users to send a\nhash, a signature, and a public key. It will return whether the signature is\nvalid or invalid, and it uses a lot less gas than it would otherwise take.\n\nThis will make it possible to cheaply create “smart accounts” that are\ncontrolled by your phone, and adds no risk to the core protocol’s signature\nscheme, which remains unchanged.\n\n(Note: The secp256r1 curve is used by more than just phones. Check out the\nRIP-7212 [https://github.com/ethereum/RIPs/blob/master/RIPS/rip-7212.md]\nproposal for more examples of use cases this unlocks. The phone is just one\nexample.)\n\nBrotli for Compression\n\nThe Optimism sequencer posts all the L2 transactions to a blob on Ethereum,\nwhich is read by nodes to rerun the transactions to reconstruct the state.\n\nThe more we can compress those transactions, the cheaper the blob cost (which\nmakes up the majority of L2 transaction cost) will be.\n\nThis upgrade switches from the previous compression algorithm to Brotli (a data\ncompression algorithm developed by Google), which reduces the amount of data we\nneed to post by 5-15%. This means the L1 portion of the gas cost will be reduced\nby 5-15%, meaning cheaper transactions.\n\nL1 Gas Cost Estimates\n\nWhen you pay for an L2 transaction, part of the cost comes from the sequencer\nestimating the cost of posting your data to L1 as a part of the blob (like\ndescribed above) and including that in your transaction cost.\n\nPrevious estimates were not completely accurate, because they were not able to\nestimate exactly how much compression would be possible. This meant that users\nmight over or under pay for their actual data usage.\n\nThis upgrade implements a new estimate function. It was tested on historical\ndata and found to provide better estimates than the previous algorithm, and to\nnever diverge substantially from the correct estimate.\n\nIncrease Sequencer Drift\n\nIf the sequencer loses its connection with L1, it would ideally continue to\nproduce blocks until it regains the connection.\n\nThere is a protocol variable called “max sequencer drift” that determines how\nlong the L2 can continue to produce blocks based on an old L1 origin. After this\npoint, the L2 can no longer produce blocks.\n\nThis upgrade increases this value from 10 minutes up to 30 minutes to add more\nflexibility, based on the unanimous agreement of chain operators.\n\nIncrease Max Batch Size\n\nAs discussed earlier, L2 transaction data is posted to L1. This is done in\n“channels”, which can group together multiple L2 blocks. However, we can’t split\na single L2 block across multiple channels — it needs to fit within one.\n\nThe maximum channel size is 10mb. That is more than enough for any normal\ncircumstances, but if an OP Stack chain allowed a gas limit of more than 40mm\n(as opposed to Optimism’s 30mm), a block could theoretically be filled with one\ntransaction with more than 10 million zeros.\n\nThis would exceed the 10mb limit, would not be able to be added to a channel,\nand therefore would fail to be posted on L1 to progress the chain.\n\nThis upgrade increases the limit to 100mb, so there is no risk of such a block\nunless a chain increases their gas limit over 400mm (which is currently far\noutside the normal range).\n\n--------------------------------------------------------------------------------\n\nAll of these changes appear to be logical, well tested, improvements to the OP\nStack, and don’t seem to create any new risks in the core chain or bridge logic.",
      "created_at": "2024-06-05T21:22:12.099Z",
      "trust_level": 2,
      "username": "zachobront",
      "admin": false,
      "moderator": false,
      "staff": false,
      "like_count": 15
    },
    {
      "content": "Great progress, congrats!\n\nI think it’s better to mention RIP-7212\n[https://github.com/ethereum/RIPs/blob/master/RIPS/rip-7212.md] and its spec for\nthe r1 precompile as EIP-7212 is outdated while the RIP spec is implemented in\nthe Fjord.",
      "created_at": "2024-05-31T00:06:12.277Z",
      "trust_level": 1,
      "username": "ulerdogan",
      "admin": false,
      "moderator": false,
      "staff": false,
      "like_count": 8
    },
    {
      "content": "@habacuc.eth [/u/habacuc.eth] The primary motivation of increasing the maximum\nseqeuencer drift value is because of past incidents in which L1 node issues have\nled to L2 unsafe head chain halts. (Unsafe chain halts are the most\nuser-disruptive type, since transactions won’t clear the transaction pool until\nthe chain restarts).\n\nWith a 10 minute sequencer drift, chain operators have at most 10 minutes to\nrespond to a non-responsive L1 before unsafe chain halt. In our experience it\nhas not been possible to react quickly enough to prevent this. The sequencer\ndrift parameter sets a maximum bound on the time the L2 chain’s knowledge of L1\n“attributes” (such as L1 gas price) is out of date. Because L1 attributes like\ngas price are designed not to fluctuate wildly in short time periods, and\nsituations where we must rely on a larger drift will be rare, the consensus was\nthe downsides of such an increase were small and well worth the added safety it\nprovides against unsafe chain halt.\n\nI should add that ideally chain operators should have significant L1 node\nredundancy so that these sorts of L1 issues never arise. However this has proven\nchallenging in practice, hence the desire for this extra level of insurance.\n\nAs for how we reached the decision, the Base team made a request at one of our\nregular infrastructure meetings to increase this value, citing previous testnet\nincidents, and continued discussing the proposal with OP Labs engineers on our\nshared Slack channels. We reached consensus on 30 minutes as providing enough\ntime for paged engineers to respond to alerts for all but the most catastrophic\nof incidents. The proposal was socialized on our broader shared superchain\nchannels and OP stack infrastructure meetings without objections from the\ncommunity.",
      "created_at": "2024-06-14T17:56:53.739Z",
      "trust_level": 2,
      "username": "bayardo",
      "admin": false,
      "moderator": false,
      "staff": false,
      "like_count": 7
    },
    {
      "content": "It will take place during the Token House community call tomorrow at 2pm EST\nhttps://meet.google.com/vme-ovto-jcn [https://meet.google.com/vme-ovto-jcn].\n\n@wbnns [/u/wbnns]",
      "created_at": "2024-06-04T06:17:21.000Z",
      "trust_level": 3,
      "username": "Michael",
      "admin": false,
      "moderator": false,
      "staff": false,
      "like_count": 6
    },
    {
      "content": "This is a rationale on behalf of the @SEEDLatam [/u/seedlatam] delegation, as we\nhave communicated here\n[https://gov.optimism.io/t/seed-latam-delegate-communication-thread/2950/45].\n\n@bayardo [/u/bayardo], thank you for sharing your perspective on this network\nupgrade. We highly appreciate your insights, along with the @zachobront\n[/u/zachobront] non-technical summary. The review you provided is quite\ndetailed.\n\nAfter commenting on this upgrade with @Joxes [/u/joxes] and the SEED Latam\ndelegation, we are thrilled by its versatility, efficiency, and resilience. From\nexpanding the possibility of signing from any device to its significant impact\non Data Availability and protocol-level efficiency, the Fjord upgrade brings a\nlot to the network.\n\nHowever, what is the rationale behind moving from 10 to 30 minutes for the\nSequencer drift? Can you explain how the chain operators reached this unanimous\ndecision? Is the time extension related to the expectation of frequent syncing\nfailures between the Sequencer and the L1, or is it due to increased resilience\nin the time to respond during these events?\n\nOnce again, thank you for your valuable insights about this network upgrade",
      "created_at": "2024-06-11T15:12:22.427Z",
      "trust_level": 2,
      "username": "habacuc.eth",
      "admin": false,
      "moderator": false,
      "staff": false,
      "like_count": 5
    }
  ],
  "created_at": "2024-05-30T21:44:52.909Z"
}