{
  "title": "[RFP Submission] OP Stack Zero Knowledge Proof",
  "content": " * S4 Intent\n   [https://gov.optimism.io/t/collective-intents/5874#intent-1-progress-towards-technical-decentralization-2]:\n   Technical Decentralization\n\n * Proposed Mission: Implement a zkVM (RISCV64 or MIPS) that adheres Cannon\n   [https://github.com/ethereum-optimism/cannon]’s virtual machine architecture.\n\n * Proposal Tier: Fledgling\n\n * Baseline grant amount: 250k OP\n\n * Alliance Lead: Tsiao\n\n * Contract Info:\n   \n   * Twitter: https://twitter.com/qiaowang1999\n     [https://twitter.com/qiaowang1999]\n   * Discord: wangtsiao#0685\n   * Email: wangtsiao@gmail.com [wangtsiao@gmail.com]\n\n * L2 recipient address: 0x7dc04FB18731032eD89236961B1a13E3d6102AE6\n\n * Please list the members of your Alliance and link to any previous work:\n   \n   * Tsiao - a developer, cryptography enthusiast. He has profound experience in\n     zero knowledge proof (ZKP) technology. Prior to the proposal, he did the\n     following ZKP-related activities.\n     * He systematically studied ZKP at university and actively participated in\n       zku-cohort-3 where he gained exceptional skills in writing circuits.\n     * Additionally, he has participated in CTF competitions and achieved\n       several first prizes, showcasing his expertise in computer security.\n   * Wenbin - a developer with more than five years of experience blockchain\n     technology, specializing in consensus and layer 2 solutions.\n     * Proficiency in permissionless blockchain development, with a deep\n       understanding of multi-signature algorithm, multi-party secure computing,\n       and optimistic Layer2 solutions.\n     * Before applying, he served as the one of core developer for a well-known\n       modular Layer2 blockchain project.\n\nWhat makes your Alliance best-suited to execute this Mission?\n\n * We are an alliance with experience in both engineering and theory. We have a\n   strong interest in ZKP.\n * We have well-established mechanism in place to distribute benefits among our\n   alliance members. Each person will receive a financial reward commensurate\n   with his workload, fostering a strong sense of unity among us.\n * What sets up apart from from freelencers is our philosophy that prioritizing\n   product delivery. We consistently meet our planned timelines and firmly\n   believe in the importance of timely project completion.\n * Completing the mission aligns with our goals. There is a high probability\n   that we will continue to maintain the zkVM project even after completing this\n   mission.\n\nPlease describe your proposed solution based on the above Solution Criteria (if\napplicable):\n\nWe have two options and eagerly anticipate further discussions with the OP team\nto select one of them.\n\n 1. Implement a zkMIPS which is nearly equivalent to Cannon\n    [https://github.com/ethereum-optimism/cannon]’s virtual machine.\n 2. Implement a zkRISCV64. Considering that Wave Computing announced\n    [https://www.wikiwand.com/en/MIPS_architecture] the cessation of MIPS ISA\n    development in March 2021 and the decreasing number of MIPS devices, we have\n    concerns about the availability of MIPS compilers in future versions of Go.\n    Therefore, we propose the RISCV64 route.\n\nzkMIPS\n\nOur solution is implementing a zkMIPS which is nearly equivalent to Cannon’s\nMIPS virtual machine (VM). The term ‘nearly’ indicates that we will optimize the\nVM to be zkSNARKs friendly. Our solution support OP’s fault proof. In the near\nfuture, we anticipate a smooth transition from Cannon’s MIPS VM to zkMIPS VM\nwith minimal adjustments to the existing code in Cannon’s implementation.\n\nWe conducted a thorough survey and found serveral zkVMs; however, none of them\nmeet the requirements of OP stack.\n\n * risc0 [https://www.risczero.com/]: a riscv32 zkVM, but the riscv32 ISA is not\n   supported by the golang compiler. It is based on zkSTARK with FRI polynomial\n   commitment, which means it has high verifier cost.\n * zkWASM [https://github.com/DelphinusLab/zkWasm]: a wasm zkVM, supported by\n   the golang compiler, but it lacks the key component for fault proof, such as\n   pre-image and hint, which are descripted in OP’s spec\n   [https://github.com/ethereum-optimism/optimism/blob/develop/specs/fault-proof.md#fault-proof-program].\n * miden-vm [https://github.com/0xPolygonMiden/miden-vm], ola-vm\n   [https://github.com/Sin7Y/olavm], valida-vm\n   [https://github.com/valida-xyz/valida]: They are all define their own ISA\n   tailored to gain higher prover performance, non of these ISAs are supported\n   by the golang compiler.\n * pse/zkevm [https://github.com/privacy-scaling-explorations/zkevm-circuits],\n   scroll-zkevm [https://github.com/scroll-tech/zkevm-circuits], polygon-zkevm\n   [https://github.com/maticnetwork/zkevm-docs]: They are zkEVMs. Compare to OP,\n   they are purely different ways to implement layer 2. That means they can not\n   be utilized to implement zk fault proof.\n\nBesides this, somewhat they all suffer poor proof generation time. Here we bench\n[https://github.com/wangtsiao/zkevm-benchs] the zkEVM inside risc0 and pse/zkEVM\non a 16 cores, 128 GB RAM machine, the results show they can not generate proof\nfor ERC20 transfer within 1 minute.\n\nzkVM ISA Proof System / Commit Scheme Proof Size Verifier Cost Support Golang\nSupport Cannon Fault Proof risc0 RISCV32 zkSTARK / FRI $O(log^2 \\ n)$ $O(log^2 \\\nn)$ :x: [https://emoji.discourse-cdn.com/twitter/x.png?v=12] :x:\n[https://emoji.discourse-cdn.com/twitter/x.png?v=12] miden-vm Custom zkSTARK /\nFRI $O(log^2 \\ n)$ $O(log^2 \\ n)$ :x:\n[https://emoji.discourse-cdn.com/twitter/x.png?v=12] :x:\n[https://emoji.discourse-cdn.com/twitter/x.png?v=12] ola-vm Custom zkSTARK / FRI\n$O(log^2 \\ n)$ $O(log^2 \\ n)$ :x:\n[https://emoji.discourse-cdn.com/twitter/x.png?v=12] :x:\n[https://emoji.discourse-cdn.com/twitter/x.png?v=12] pse/zkevm EVM halo2 / KZG\n$O(1)$ $O(1)$ :x: [https://emoji.discourse-cdn.com/twitter/x.png?v=12] :x:\n[https://emoji.discourse-cdn.com/twitter/x.png?v=12] scroll/zkevm EVM halo2 /\nKZG $O(1)$ $O(1)$ :x: [https://emoji.discourse-cdn.com/twitter/x.png?v=12] :x:\n[https://emoji.discourse-cdn.com/twitter/x.png?v=12] polygon/zkevm EVM zkSTARK /\nFRI+KZG $O(1)$ $O(1)$ :x: [https://emoji.discourse-cdn.com/twitter/x.png?v=12]\n:x: [https://emoji.discourse-cdn.com/twitter/x.png?v=12] zkWasm WASM halo2 / IPA\n$O(log \\ n)$ $O(log \\ n)$ :white_check_mark:\n[https://emoji.discourse-cdn.com/twitter/white_check_mark.png?v=12] :x:\n[https://emoji.discourse-cdn.com/twitter/x.png?v=12] zkMIPS MIPS halo2 / KZG →\nHyperNova / Folding $O(1)$ $O(1)$ :white_check_mark:\n[https://emoji.discourse-cdn.com/twitter/white_check_mark.png?v=12]\n:white_check_mark:\n[https://emoji.discourse-cdn.com/twitter/white_check_mark.png?v=12]\n\nWe denote circuit size as $n$, The above table lists various zkVMs and their\ncorresponding instruction set architecture (ISA), proof system / polynomial\ncommitment scheme, etc.\n\nAs a latecomer, zkMIPS will be designed to avoid the disadvantages of the above\nzkVMs, here are our goals.\n\n 1. zkMIPS should support mips ISA, produce assertion proof for any golang\n    program.\n 2. zkMIPS should support the pre-image and hint components in fault proof,\n    which plays a crucial role in Cannon.\n 3. zkMIPS should have a considerable prover performance. This is achived by\n    utilzing GPU and adopting cut-edge ZKP algorithm.\n 4. zkMIPS should have a cheap cost for verifying proof. It is important because\n    the verifier is a contract on L1, the gas price is expensive.\n\nIn the short term we will utilize plonkish, custom gates, lookup tables to\nimplement zkMIPS, and we plan to utilze GPU to accelerate the proof generation.\nOur long term vision is implementing a zkMIPS based on folding, which proposed\nin Nova [https://github.com/microsoft/Nova], and it enables ~50x prover\nperformance.\n\nThe zkMIPS should support the following 55 instructions:\n\n'addi', 'addiu', 'addu', 'and', 'andi',\n'b', 'beq', 'beqz', 'bgez', 'bgtz', 'blez', 'bltz', 'bne', 'bnez',\n'clz', 'divu',\n'j', 'jal', 'jalr', 'jr',\n'lb', 'lbu', 'lui', 'lw', 'lwr',\n'mfhi', 'mflo', 'move', 'movn', 'movz', 'mtlo', 'mul', 'multu',\n'negu', 'nop', 'not', 'or', 'ori',\n'sb', 'sll', 'sllv', 'slt', 'slti', 'sltiu', 'sltu', 'sra', 'srl', 'srlv', 'subu', 'sw', 'swr', 'sync', 'syscall',\n'xor', 'xori'\n\n\nIt also should implement Preimage and Hint read and wirte for system call. The\nkeccak256 in Preimage is the most heavy part for ZKP. Poseidon\n[https://ethresear.ch/t/performance-of-rescue-and-poseidon-hash-functions/7161]\nis an arithmetization-oriented hash function, meaning that it is ZKP friendly,\nso we plan to use Posidon instead of keccak256.\n\nzkRISCV64\n\nI won’t go too much details about zkRISCV64, because the difference between\nzkMIPS is trivial. It use RISCV64 ISA and also support OP’s fault proof system.\n\nBut there are some drawbacks to implement zkRISCV64, I hope discussing with OP\ngov and make the decision together.\n\n * For zkRISCV64, we need re-implement Cannon\n   [https://github.com/ethereum-optimism/cannon] with RISCV64, this will\n   increase the development time.\n * For zkRISCV64, there are much more instructions and registers to implement,\n   the larger feature intructions set makes audit heavy. This will also increase\n   the development time.\n\nPlease outline your step-by-step plan to execute this Mission, including\nexpected deadlines to complete each peice of work:\n\nHere is our step-by-step plan.\n\n 1. Write a specification for the VM, including each component’s corresponding\n    ZKP circuit. It should be clear and easy to implement.\n 2. Implement the zkVM following the specification, we plan to write ZKP circuit\n    based on halo2 proof system with KZG\n    [https://dankradfeist.de/ethereum/2020/06/16/kate-polynomial-commitments.html]\n    commitment scheme.\n 3. Unit testing for each VM instruction, then integration testing of several go\n    language programs, just like cannon\n    [https://github.com/ethereum-optimism/cannon/tree/master/mipsevm/open_mips_tests]\n    did.\n 4. Enable provers to utilize GPU to accelerate generating proofs.\n\nPlease define the critical milestone(s)\n[https://gov.optimism.io/t/grant-policies/5833] that should be used to determine\nwhether you’ve executed on this proposal:\n\n 1. We will give a clear specification for the zkVM before Aug 4th AOE.\n 2. We will implemented the memory and stack proof before Aug 25th AOE.\n 3. We will implemented the instructions set before Sep 15th AOE.\n 4. We will done integration testing for the zkVM before Sep 29th AOE.\n\nPlease list any additional support your team would require to execute this\nmission (financial, technical, etc.):\n\n * Ideally, we can start the building without supporting, but an well-performing\n   server after building (i.e., at test stage) would help.\n\nGrants are awarded in OP, locked for one year. Please let us know if access to\nupfront capital is a barrier to completing your Mission and you would like to be\nconsidered for a small upfront cash grant:\n\n * Ideally, we can start the building without but the small financial grant\n   would help.\n\nPlease check the following to make sure you understand the terms of the Optimism\nFoundation RFP program:\n\n * I understand my grant for completing this RFP will be locked for one year\n   from the date of proposal acceptance.\n * I understand that I will be required to provide additional KYC information to\n   the Optimism Foundation to receive this grant\n * I understand my locked grant may be clawed back for failure to execute on\n   critical milestones, as outlined in the Operating Manual\n   [https://github.com/ethereum-optimism/OPerating-manual/blob/main/manual.md#valid-proposal-types]\n * I confirm that I have read and understand the grant policies\n   [https://gov.optimism.io/t/token-house-grant-policies/5833]\n * I understand that I will be expected to following the public grant reporting\n   requirements outlined here\n   [https://gov.optimism.io/t/suggested-public-reporting-requirements-for-grantees/4176]",
  "views": 1515,
  "like_count": 8,
  "word_count": 1743,
  "answer": [
    {
      "content": "Exciting to see this proposal! I believe this is an application to this\nFoundation Mission (RFP)\n[https://github.com/ethereum-optimism/ecosystem-contributions/issues/61]. You\ndon’t need to post your application to Foundation Mission (RFPs) to the forum,\nyou just need to reply with this information directly on the github issue (bobby\nhas already linked this proposal there but making sure the process is clear for\nothers reading this.)",
      "created_at": "2023-06-12T21:38:16.092Z",
      "trust_level": 4,
      "username": "lavande",
      "admin": true,
      "moderator": true,
      "staff": true,
      "like_count": 1
    }
  ],
  "created_at": "2023-06-10T03:53:17.839Z"
}