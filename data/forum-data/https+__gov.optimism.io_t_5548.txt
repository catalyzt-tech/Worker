{
  "title": "[FINAL] Upgrade #1: Bedrock Protocol Upgrade - v2",
  "content": "EXECUTIVE SUMMARY\n\n> In short, what is this upgrade proposal?\n> Impacted stakeholders & expected outcomes\n> Why the Collective should upgrade\n\nThe Optimism Foundation is proud to propose the first protocol upgrade to the\nOptimism Collective: Bedrock. The Bedrock release of the OP Stack represents the\nculmination of years of research and development by the Ethereum scaling\ncommunity and is a complete rewrite of the core components of the Optimism\narchitecture. This upgrade offers a new level of modularity, simplicity, and\nEthereum equivalence for Layer 2 solutions, providing unprecedented performance\nand functionality.\n\nMost users will not be impacted by the upgrade as the current mainnet is already\nEVM-equivalent. Users and projects that run both full and archive nodes, make\nuse of deposits and withdrawals, and make assumptions about the block time on\nOptimism Mainnet will need to take action to prepare for the upgrade. To help\nensure a smooth transition, a thorough changelog and stakeholder-specific\nrequirements can be found below.\n\nIn addition to these technical improvements, the Bedrock upgrade is a\nsignificant step towards the multi-chain future. By creating a shared standard,\nthe OP Stack\n[https://optimism.mirror.xyz/fLk5UGjZDiXFuvQh6R_HscMQuuY9ABYNF7PI76-qJYs],\nBedrock sets the stage for a Cambrian explosion of aligned L2s\n[http://optimism.io/superchain]. This is an opportunity for leadership in the\nEthereum ecosystem.\n\nWe are confident that the post-Bedrock experience will be a positive change for\ndevelopers in the Optimism ecosystem and have received consistent excitement for\nthe upgrade from our partners. We are committed to making this upgrade a success\nand are eager to see the results in the months and years to come.\n\n\nTECHNICAL SUMMARY\n\n> Overview of architectural changes\n> Link to all protocol/API/tech specifications\n> Overview of ongoing security considerations incl. all audits and findings\n\n\nOVERVIEW/ARCHITECTURE\n\nAt the highest level, the Bedrock release implements a modular architecture,\nseparating the OP Stack into 3 components: consensus, execution, and settlement.\nThese designs borrow heavily from the Engine API introduced for the Merge, and,\nas a result, an Ethereum execution client can be converted into an Optimism\nexecution client in <2,000 lines of code [https://op-geth.optimism.io/]. This is\na huge win, paving the way for a multi-client future\n[https://medium.com/ethereum-optimism/our-pragmatic-path-to-decentralization-cb5805ca43c1],\nand allowing for maximal use of Ethereum’s battle-tested code.\n\nTechnical documentation for Bedrock is split into 3 main parts:\n\n * An explainer\n   [https://community.optimism.io/docs/developers/bedrock/explainer/] detailing\n   Bedrock and its major architectural choices.\n * Protocol specifications\n   [https://github.com/ethereum-optimism/optimism/tree/develop/specs] for all\n   major components of the codebase.\n * Developer documentation\n   [https://community.optimism.io/docs/developers/bedrock/differences/] for\n   those using any APIs affected by the release.\n\n\nSECURITY CONSIDERATIONS\n\nA summary of the initial security measures and considerations for Bedrock can be\nfound in this blog post by OP Labs [https://dev.optimism.io/bedrock-security/],\nwhich includes links to security audits and testing measures. For easier access,\na list of security audits are hosted in the OP Stack monorepo\n[https://github.com/ethereum-optimism/optimism/tree/develop/technical-documents/security-reviews].\nAudits relevant to the Bedrock release are prefaced with 2022/3.\n\nNotably, the Bedrock release introduces a 2-phase withdrawal process, doubling\ndown on bridge security, which proved to be a primary risk factor for chains in\n2022.\n\nSince the previous draft of this proposal in voting cycle 10, the Sherlock\ncommunity completed a successful bug hunt, which most notably resulted in 3 High\nseverity findings\n[https://github.com/sherlock-audit/2023-01-optimism-judging/issues?q=is:issue+is:open+sort:updated-desc+label:High]\nand 11 Medium severity findings\n[https://github.com/sherlock-audit/2023-01-optimism-judging/issues?q=is:issue+is:open+sort:updated-desc+label:Medium+].\nNone of these enable theft of assets, but some could have caused users’ assets\nto be locked until a subsequent upgrade made them recoverable.\n\n\nIMPACT SUMMARY\n\n> Changes in performance characteristics\n> Time-of-upgrade considerations (downtime, etc)\n> Links to exhaustive upgrade documentation for impacted stakeholders\n\nThe Bedrock release enables performance improvements across the board, including\ntransaction costs, throughput characteristics, and sync speeds. Exact numbers\nare dependent on real-world chain activity, which can’t be known until actual\ndeployment. However, we estimate a 47% reduction in protocol costs/security\nfees. You can read more in this post on the OP Labs dev blog\n[https://dev.optimism.io/heres-how-bedrock-will-bring-significantly-lower-fees-to-optimism-mainnet/].\n\nThe Bedrock migration will require pausing deposits and sequencer transaction\ningestion during the upgrade, effectively resulting in network downtime. We\nestimate that this will take <4 hours. Unlike previous upgrades to Optimism,\nthis release will not require a “regenesis,” and historic chain data will still\nbe accessible after the upgrade. As such, little action is required from\nend-users of Optimism other than being aware of that timing.\n\nWhile the upgrade strictly improves on EVM equivalence, some application\ndevelopers may be affected. While we have been in active touch with major\npartners, the developer community has also been actively notified over the past\nfew months in 1:many communications. We maintain the following documentation\npages for impacted developers:\n\n * A guide by persona\n   [https://community.optimism.io/docs/developers/bedrock/differences/#guide-by-persona]\n   on what most developers need to prepare for the upgrade.\n * A guide specifically for node operators\n   [https://community.optimism.io/docs/developers/bedrock/node-operator-guide/],\n   which are impacted most by the upgrade.\n * A general FAQ page\n   [https://community.optimism.io/docs/developers/bedrock/upgrade-guide/#] for\n   the upgrade.\n\n\nACTION PLAN\n\n> Mainnet Upgrade Timing\n> Contingency plans in case of last-minute bugs or issues\n> Plan for communication and education to the community\n\nSince the previous version of this proposal, we have made the decision to favor\na set of rigorous go-live criteria for the upgrade, as opposed to specifying to\nthe exact date in the proposal itself. Specifying go-live criteria allows the\ncommunity to focus on the ideal conditions for the upgrade, rather than\ncommitting to a timeline that could result in a rush to the finish line.\nPrimarily, these criteria consist of:\n\n * A successful upgrade of Goerli to the “Regolith” release, which incorporates\n   the improvements recently identified by Sherlock.\n * A follow up audit to test the fixes made after the previous audit.\n * Internal rehearsals of both the migration and recovery from an invalid output\n   root\n * 2 weeks of testnet stability on a consensus- and feature-frozen release,\n   followed by a public announcement with 3 weeks of notice to the community.\n\n\nREGOLITH GOERLI HARD FORK\n\nThe Regolith hard fork is a hard fork that will be activated at a set block time\non Optimism Goerli around March 17, 2023 @ 7:00:00 pm UTC\n[https://github.com/ethereum-optimism/optimism/pull/5010]. Because the hard fork\nwill be activated before the governance vote completes, Optimism Mainnet will be\nupgraded to Bedrock with the Regolith hard fork already activated. Regolith\nimproves Ethereum equivalence, primarily for deposit system transactions which\nare required by L2. Changes are defined in the specs here\n[https://github.com/ethereum-optimism/optimism/blob/develop/specs/network-upgrades.md#regolith].\nThese features would be activated from day 1 of Bedrock on Optimism Mainnet.\n\n\nGO-LIVE CRITERIA\n\nOnce the Regolith fork is complete, the next step is to upgrade mainnet. If this\nproposal passes, we will upgrade to Bedrock given that the following criteria\nare met:\n\n\nCONSENSUS AND FEATURE FROZEN\n\n 1. No consensus changes are to be made to the op-geth op-node, op-batcher, or\n    op-proposerpackages. No major refactors, architectural changes, or\n    non-trivial feature additions are to be made to op-gethand op-node packages\n    .\n    1. “Consensus changes” are defined as any changes that modify the batch\n       derivation function, the EVM, or would otherwise require coordination\n       between node operators.\n       1. Examples include: L1 Cost function / Receipt changes in op-geth,\n          introduction of a new batch version or compression, changing signing\n          hashes.\n       2. No changes should be made to op-geth unless they are clearly justified\n          as non-consensus\n       3. No changes should be made to the in the rollup package in the op-node\n          unless they are clearly justified as non-consensus\n    2. No major refactors or architectural changes (e.g.: pulling in an upstream\n       geth version, modifying the derivation pipeline, fundamental changes to\n       peer-to-peer networking)\n    3. No non-trivial features should be added to op-node or op-geth (e.g. Snap\n       Sync)\n 2. No upgrades to the L1 or L2 Goerli smart contracts are required or executed.\n\nNote: Low severity bug fixes, additional testing, small scope refactors will not\nbe considered “un-freezing.” These small refactors may precipitate minor\nreleases of our software.\n\n\n2 WEEKS’ STABILITY\n\nAfter Optimism Goerli is change-frozen, the sequencer, batcher & proposer must\nshow 14 consecutive days of stability. We define stability in this context as:\n\n 1. No Sequencer failures.\n    * The sequencer does not persistently drop any valid L2 transactions.\n    * The sequencer does not produce any invalid blocks.\n    * The sequencer consistently produces blocks at the intended 2-second\n      intervals.\n 2. No Batcher downtime exceeding 6 hours.\n    * Batch transactions are regularly submitted and confirmed on L1 at the\n      intended frequency.\n    * The batcher is “keeping up” with the sequencer (i.e. the number of\n      not-yet-batched L2 blocks is not growing over time).\n    * The majority of batch transactions confirmed in each window are valid.\n 3. No Proposer downtime exceeding 12 hours.\n    * There is no gap in output root submission exceeding 12 hours.\n    * The proposer does not otherwise violate its responsibility to keep the\n      output roots live, e.g. by unnecessarily deleting valid output roots.\n    * There is no invalid output root submitted.\n\n\nINTERNAL REHEARSALS\n\n 1. We have completed two end-to-end internal upgrade rehearsals, using forks of\n    the Mainnet L1 & L2 networks.\n 2. We have completed a rehearsal deleting an L2 Output, to prepare for the\n    unexpected event of a faulty proposal.\n\n\nCOMMUNITY AWARENESS\n\nOnly after hitting the above criteria will the Optimism Foundation announce an\nupgrade date, set at least 3 weeks after the time of announcement. Tentatively,\nwe expect to announce the nearest Tuesday, at 9am PST, which fulfills this\nrequirement. Note that the upgrade will be triggered at a specific time, and not\na block height.\n\nThe Optimism Foundation and OP Labs will continue public communication efforts\naround the upgrade, including public communications and tweets reminding\nstakeholders of the upgrade in the weeks, days, and hours leading up to the\nupgrade.\n\n\nSECURITY CANCELLATION CLAUSE\n\nNote that this proposal would allow for bugfixes and stability improvements to\nbe incorporated after the date that this proposal passes, potentially resetting\nthe clock for the change freeze criteria. However, in the event that a\nsignificant, new security risk is discovered, we may cancel the upgrade,\nrequiring a new vote once the community has had time to react.\n\n\nCONCLUSION\n\nThis proposal outlines the Optimism Collective’s first Protocol upgrade of\nOptimism Mainnet to the Bedrock release. This upgrade aims to provide\nunprecedented modularity, simplicity, and Ethereum equivalence to the L2\nnetwork, with positive impacts on performance and security. Bedrock is the\ncodebase which will help Optimism stand the test of time, and is also\npreparatory step towards the multi-chain future.\n\nWe expect the upgrade will incur around 4 hours of downtime, with no loss of\nhistorical data. Detailed technical specifications and impact summaries are\navailable for the upgrade, as well as a thorough run-book of go/no-go criteria.\n\nWe strongly believe that the Collective should upgrade Optimism Mainnet to the\nBedrock release, take advantage of the benefits it brings, and to continue to\nplay a leadership role in the scaling community.",
  "views": 12751,
  "like_count": 134,
  "word_count": 5546,
  "answer": [
    {
      "content": "Hey folks, Maurelian from OP Labs here to provide a more detailed rundown on the\nfinal results of the Sherlock audit contest.\n\nFirst to provide some context: an audit contest is a variation on a typical\nsmart contract security audit, in which a total reward pot is posted to\nincentivize auditors to look for issues in a codebase. The rewards are paid out\nbased on the number and severity of findings. You can find more details about\naudit contests in general in the Sherlock docs\n[https://docs.sherlock.xyz/audits/protocols#audit-contests] and about the\nBedrock contest in particular in the contest description\n[https://app.sherlock.xyz/audits/contests/38].\n\n\nRECAP OF THE NUMBERS\n\n * A total reward of $720k was posted\n * 333 people signed up for the contest\n * 314 issues were submitted in total (note: this does not mean there were 314\n   unique issues)\n * 60 people submitted at least one issue\n\nSummary of Findings\n\nAfter reviewing all 314 issues, identifying duplicates, and assigning\nseverities, we’ve identified:\n\n * 3 High severity findings (which you can see here\n   [https://github.com/sherlock-audit/2023-01-optimism-judging/issues?q=is:issue+is:open+sort:updated-desc+label:High])\n * 11 Medium severity findings (which you can see here\n   [https://github.com/sherlock-audit/2023-01-optimism-judging/issues?q=is:issue+is:open+sort:updated-desc+label:Medium+])\n\nYou may notice that the numbers in this update are different from Ben’s previous\nupdate [https://gov.optimism.io/t/draft-upgrade-proposal-bedrock/5014/82].\n\nThis is because the audit contest has recently completed the escalation period,\nduring which auditors could stake funds on any issues they feel have been\nmisjudged. This has led to a re-review of 32 issues by the Sherlock team with\nsupport from OP Labs.\n\nImportantly, one of the high severity findings we previously reported has since\nbeen identified as a false positive.\n\nThe ‘evolving understanding’ of the results is a necessary by-product of the\naudit competition model, as a significant effort was required to understand and\nvalidate the many reports we received.\n\nNext, I’ll walk through the details of the various issues. Each of these issues\nhas already either been fixed, or else has a fix in progress.\n\n\nOVERVIEW OF HIGH SEVERITY FINDINGS\n\nThe high severity findings were all of a similar nature, namely permissionless\ngriefing [https://en.wikipedia.org/wiki/Wikipedia:Griefing] attacks which would\nallow any malicious user to interfere with a victim’s withdrawals from L1 to L2,\ncausing their assets to be locked in the system. If the contracts were not\nupgradable, the locked assets would be irrecoverable.\n\nRelevant to each of the high severity findings is the fact that all withdrawal\ntransactions are sent via the OptimismPortal, which finalizes the withdrawal\nregardless of the result (so if the call from the portal fails, it cannot be\n‘replayed’). In order to provide additional safety guarantees for most users,\nCrossDomainMessenger contracts are included in the codebase, which are designed\nto ensure that deposits and withdrawals sent using these contracts can always be\nretried.\n\nIt is also important to note that finalizing a withdrawal transaction is\npermissionless, ie. Bob can finalize Alice’s withdrawals and vice versa.\n\nWith that context, the specifics of each attack are as follows:\n\n\nHIGH SEVERITY FINDING 1: REENTRANCY LOCK UP\n\nThis finding specifically affects withdrawals that are sent via the messenger\ncontracts. It would enable an attacker to lock up users’ withdrawals one at a\ntime, meaning that they could identify a specific withdrawal and ensure that it\nis finalized in the OptimismPortal, but cannot be replayed by the\nL1CrossDomainMessenger. Details can be found in issue 87\n[https://github.com/sherlock-audit/2023-01-optimism-judging/issues/87].\n\n\nHIGH SEVERITY FINDING 2: HIGH GAS LIMIT LOCK UP\n\nThis finding specifically affects withdrawals which have a very high gas limit\n(greater than 11,245,655 gas). In such cases an attacker can finalize the\nwithdrawal but ensure that slightly less than the requested gas amount is\nforwarded. This is an edge case, but breaks the important guarantee that the\namount of gas specified for the withdrawal on L2 will be made available to it on\nL1. Details can be found in issue 109\n[https://github.com/sherlock-audit/2023-01-optimism-judging/issues/109].\n\n\nHIGH SEVERITY FINDING 3: LOW GAS LIMIT LOCK UP\n\nThis finding specifically affects withdrawals with gas limits set close to the\nlower bound of what is required to finalize it on L1. In such cases, an attacker\ncan finalize the withdrawal with just enough gas to ensure that is is finalized,\nbut not enough for the call to succeed. Details can be found in issue 80\n[https://github.com/sherlock-audit/2023-01-optimism-judging/issues/80].\n\n\nOVERVIEW OF MEDIUM SEVERITY FINDINGS\n\nThese findings (which you can see here\n[https://github.com/sherlock-audit/2023-01-optimism-judging/issues?q=is:issue+is:open+sort:updated-desc+label:Medium+])\nfall into 4 categories:\n\n 1. Griefing\n    1. Permissioned withdrawal griefing, would allow the Proposer to lockup a\n       withdrawal, or the Challenger to invalidate finalized withdrawals. These\n       attacks are similar to the High severity ‘permissionless griefing’\n       attacks except that they require increased authorization. Details can be\n       found in issues 53\n       [https://github.com/sherlock-audit/2023-01-optimism-judging/issues/53],\n       57\n       [https://github.com/sherlock-audit/2023-01-optimism-judging/issues/57],\n       75 [https://github.com/sherlock-audit/2023-01-optimism-judging/issues/75]\n       and 138\n       [https://github.com/sherlock-audit/2023-01-optimism-judging/issues/138].\n    2. Deposit griefing, which would allow a malicious user to interfere with\n       other users’ deposits. Details can be found in issue 277\n       [https://github.com/sherlock-audit/2023-01-optimism-judging/issues/277].\n 2. Errors in the migration process. Issue 105\n    [https://github.com/sherlock-audit/2023-01-optimism-judging/issues/105]\n    would cause the migration process to halt thus increasing down time. Issue\n    235 [https://github.com/sherlock-audit/2023-01-optimism-judging/issues/235]\n    may result in some pre-bedrock withdrawals being locked in the system.\n 3. DoS attacks on the op-geth or op-node services. Details can be found in\n    issues 71\n    [https://github.com/sherlock-audit/2023-01-optimism-judging/issues/71], 177\n    [https://github.com/sherlock-audit/2023-01-optimism-judging/issues/177], 276\n    [https://github.com/sherlock-audit/2023-01-optimism-judging/issues/276], and\n    279 [https://github.com/sherlock-audit/2023-01-optimism-judging/issues/279]\n 4. Token compatibility issues. Details can be found in issue 220\n    [https://github.com/sherlock-audit/2023-01-optimism-judging/issues/220].\n\n\nNEXT STEPS\n\nEach of the identified issues has already either been fixed, or else has a fix\nin progress.\nWe are now performing our own internal audit, using these findings to:\n\n 1. Retroactively search for similar issues;\n 2. Identify testing and process improvements which would have prevented these\n    issues from being introduced; and\n 3. Create monitoring to ensure that we can detect and respond to similar issues\n    should they occur in production.\n\nWe will also be conducting a follow up audit, and will announce the date as soon\nas it is confirmed.",
      "created_at": "2023-03-09T02:57:20.773Z",
      "trust_level": 1,
      "username": "maurelian",
      "admin": false,
      "moderator": false,
      "staff": false,
      "like_count": 14
    },
    {
      "content": "Hey folks, just wanted to provide some context on this v2 of the Bedrock\nproposal beyond what makes sense in the proposal itself. While much of this\nproposal is the same as the initial version from last cycle, I thought it would\nbe worth making some explicit callouts on what has changed:\n\n * Incorporation of Sherlock results: the post includes a summary of the results\n   of the our most recent audit competition, and adds direct links to all\n   historic audits for Bedrock. I’ve also asked that someone from the OP Labs\n   team provides an even more detailed breakdown than we think would be\n   appropriate for the proposal itself.\n * Explicit callout of downtime: one important piece of feedback we got was that\n   it should be clearer in the post that during the upgrade, transaction\n   ingestion will be paused. It’s more explicit and bolded now; I thought worth\n   restating here.\n\nLastly and most notably, instead of committing to a date up front this version\nof the proposal includes a rigorously specified go-live criteria for the\nupgrade, which includes circumstances that would block or delay the upgrade even\nafter voting concludes.\n\n * The TLDR of this criteria is: 2 weeks of testnet stability on a feature and\n   consensus-frozen Goerli, followed by at least 3 weeks of notice to the\n   community.\n\nThe goal of this approach is to provide the community with a more rigorous\nstandard for the proposed upgrade, and avoid any circumstances which could cause\nthe release to be rushed. For example, in the previous version of the proposal,\nif we had discovered a potential stability improvement after completion of the\nvote, we would not have had 2 weeks to test on Goerli. In this version of the\nproposal, that scenario would reset the clock on the consensus and feature\nfrozen criteria of the proposal, strictly blocking the upgrade. We think this\nstrikes a good balance, which allows us to focus on the ideal conditions for the\nupgrade, rather than committing to a timeline that could result in a rush to the\nfinish line, while still providing rigorous standards for the community to\nuphold.",
      "created_at": "2023-03-09T02:46:23.499Z",
      "trust_level": 4,
      "username": "ben-chain",
      "admin": false,
      "moderator": true,
      "staff": true,
      "like_count": 12
    },
    {
      "content": "I’m unclear about the timelines. Ideally, I’d like to see voting on this\nproposal after Go-live criteria is established, and 2 weeks’ stability is\ndemonstrated, but it’s unclear at what point this proposal goes to vote. Cycle\n11 seems a bit sketchy while Goerli testing is still pending on a new version\nwith multiple changes post-Sherlock. Without that, governance voting is more\nlike “giving Optimism Foundation rights to manage the upgrade as defined” rather\nthan actually voting on the upgrade. Which may be the defacto situation anyway,\nand I don’t have an issue with that in this early stage, but it should be\nclarified. In the medium-to-long term, though, upgrade proposals should only be\nsubmitted after readiness for mainnet has been abundantly demonstrated.\n\nAppreciate the detailed recap of Sherlock. Can the “internal upgrade rehearsals”\nbe expanded akin to shadowforks L1 devs do? I.e. after the fork, mainnet\ntransactions are replicated on the shadowfork. That’s a great way to test\nupgrades.",
      "created_at": "2023-03-09T05:41:31.976Z",
      "trust_level": 2,
      "username": "polynya",
      "admin": false,
      "moderator": false,
      "staff": false,
      "like_count": 8
    },
    {
      "content": "We are an Optimism delegate\n[https://gov.optimism.io/t/gfx-labs-delegate-communication-thread/2728] with\nsufficient voting power [https://gov.optimism.io/t/delegate-commitments/235/34]\nand believe this proposal is ready to move to a vote.",
      "created_at": "2023-03-15T19:28:24.631Z",
      "trust_level": 2,
      "username": "GFXlabs",
      "admin": false,
      "moderator": false,
      "staff": false,
      "like_count": 8
    },
    {
      "content": "We are an Optimism delegate\n[https://gov.optimism.io/t/delegate-commitments/235/182] with sufficient voting\npower\n[https://vote.optimism.io/delegate/0xaa31CB426e2C83cDa9C850874D166d7fcA836B14]\nand believe this proposal is ready for a vote.\n\nAfter months of playing on the testnet to ensure Rubicon is prepared for the\nupgrade, our team is excited to see Bedrock’s lower fees, consistent block time,\nand multi-client L2 ecosystem in production! :rock:\n[https://emoji.discourse-cdn.com/twitter/rock.png?v=12]\n\nNetwork upgrades are no easy feat; we were very pleased to see the strong\ncommitment to security and transparency throughout this process. In particular,\nwe love the “reset” functionality in this vote and think it will be great\npractice for future network upgrades!",
      "created_at": "2023-03-16T22:31:36.782Z",
      "trust_level": 1,
      "username": "rubicon",
      "admin": false,
      "moderator": false,
      "staff": false,
      "like_count": 8
    }
  ],
  "created_at": "2023-03-09T02:39:28.763Z"
}