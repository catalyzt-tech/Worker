{
  "title": "Simulating RetroPGF3 Voting and Funding Allocations",
  "content": "After reviewing all the RetroPGF 3 discussions, @ccerv1 [/u/ccerv1] and I\ncollaborated on a simulator to analyze a few questions around the quorum-median\nmodel and enable badgeholders to further explore their questions and ideas.\n\nThis is a two-part post. In this first part, we describe the “quorum-median”\nmodel\n[https://gov.optimism.io/t/simulating-retropgf3-voting-and-funding-allocations/7274#round-3-model-1]\n+ general goals and assumptions, introduce a simulator\n[https://gov.optimism.io/t/simulating-retropgf3-voting-and-funding-allocations/7274#simulation-4],\nand using the simulator with placeholder-data, attempt to answer a few questions\n[https://gov.optimism.io/t/simulating-retropgf3-voting-and-funding-allocations/7274#quorum-median-model-questions-8]\nraised by the OP Collective. The second post, coming in January, will explore\ncollusion and lists when the complete dataset is released.\n\nLet’s start with laying out the “quorum-median” Round 3 model:\n\n\nROUND 3 MODEL:\n\n * Simple quorum of 17 votes + median of amounts allocated per project\n * Lists created by badgeholders containing projects with suggested allocation\n   distribution.\n\nMore details: Round 3 Design post\n[https://gov.optimism.io/t/retropgf-3-round-design/6802] and Badgeholder’s\nManual [https://www.optimism.io/badgeholder-manual], and V1 of results\ncalculation\n[https://github.com/ethereum-optimism/op-analytics/tree/main/rpgf_calculator].\n\n\nAN IDEAL MODEL WOULD SOLVE FOR:\n\n * Preventing badgeholder collusion (creating a threshold of requiring more\n   voters to impact results).\n * Projects with fewer ballots are not penalized and reduces a popularity\n   contest. Smaller/independent projects should have equal chance of being\n   reviewed/rewarded for their impact.\n * Final allocation is closest to fill the gap of “impact = profit”, which means\n   not more or less.\n * Reducing the “metagame” that badgeholders engage in (making adjustments based\n   on what they think others will do).\n\n\nASSUMPTIONS:\n\n * Badgeholders should try to allocate the amount that fills the gap “impact =\n   profit”\n * Every badgeholder is not reviewing/voting for every project.\n * Each badgeholder has 30M OP to allocate, but does not have to deploy the full\n   amount.\n * A 0 ballot should not be the same as an abstain/happy to go with majority’s\n   decision ballot. An “abstain” ballot confirms review / approves project for\n   quorum, but doesn’t indicate a specific allocation amount to be counted as\n   part of the median.\n * A project must meet a minimum of 1,500 OP to be funded. Therefore an abstain\n   ballot means the project should be funded, but more than 1,500 OP.\n * A project can reach quorum and have 0 OP allocated.\n\nThere were a few discussions around the downsides of a quorum+median model, such\nas a “meta-game” (certain intentional or unintentional choices bringing down a\nproject’s median) and the irony of quorum collusion\n[https://twitter.com/ricmoo/status/1733148821578740044?s=46&t=4AO0rTqq96dYfzxweu6_8Q].\nThis left us with a few questions we wanted to answer through simulations.\n\n--------------------------------------------------------------------------------\n\n\nSIMULATION\n\nCarl created a model\n[https://github.com/opensource-observer/insights/tree/main/experiments/retropgf_simulation]\nthat allows you to simulate different round assumptions. It’s not very\nsophisticated, but should allow some experimentation around scoring algorithms.\n\n\nINITIALIZING THE MODEL\n\nFirst, initiate the round by setting the max funding equal to 30M tokens.\n\nsimulation.initialize_round(\n    max_funding=30_000_000\n)\n\n\nThen, generate a random set of projects.\n\nsimulation.randomize_projects(\n\t\tnum_projects=643\n)\n\n\nWhen projects are generated, they are assigned an impact rating. Impact ratings\nare distributed randomly along a simple bell curve.\n\nFinally, generate a random set of voters.\n\nsimulation.randomize_voters(\n    num_voters=150, \n    willingness_to_spend=1.0, \n    laziness_factor=0.5, \n    expertise_factor=0.5\n)\n\n\nThis function initializes a set of 150 voters with the following properties\ndetermined at random:\n\n * The voter’s willingness to spend up to the maximum amount. A value of 0.5\n   would mean that some voters will only spend up to 15M tokens.\n * The voter’s laziness when it comes to reviewing all of the projects. The\n   higher the value, the fewer projects the average voter will include in their\n   ballot. A value of 0.5 means that voters will select up to 50% of the\n   projects in the pool.\n * The voter’s expertise when it comes to identifying high impact projects. The\n   higher the value, the more likely it is that the voter is making good choices\n   and not just selecting randomly. A value of 0.5 means that voters will be in\n   a calibration range of 50-150% of a project’s true impact rating.\n\nThe higher these three values are, the more likely it is that voters will\ndeliver a very skewed allocation result, rewarding only a small number of high\nimpact projects.\n\nThe model has some scaffolding to map relationships between voters and projects\nand model collusion among voters, but this hasn’t been implemented yet.\n\n\nRUNNING A SIMULATION\n\nWhen a simulation is run, each voter effectively “scores” each project. The\nscore is the product of their expertise (randomized within a range) and the\nproject’s true impact rating. The scores are sorted and the bottom ones are\nthrown out based on the voter’s laziness. The voter iterates through each\nproject and casts a vote. The vote itself is also a random number, between the\nmin funding amount and a max variable that is set based on max funding and the\ntotal number of projects the voter is willing to consider. The max the voter is\nwilling to give to any project decays after each vote. This continues until the\nvoter runs out of money.\n\nOnce all votes are complete, the simulation calculates the appropriate\nallocation to each project based on different scoring formulas, eg:\n\nsimulation.simulate_voting_and_scoring(\n    n=1,\n    scoring_method='median',\n    quorum=17,\n    min_amount=1500,\n    normalize=True\n)\n\n\nThe variable n represents how many times to run the Monte Carlo simulation in\norder to get a reasonable sense of the distribution patterns. The other\nvariables include several variants of the scoring method (median, mean, simple\nquadratic funding, and Ricmoo’s “outlier” method\n[https://twitter.com/ricmoo/status/1733148821578740044?s=46&t=4AO0rTqq96dYfzxweu6_8Q]),\na quorum threshold, a min_amount per project threshold, and whether to normalize\nthe results pro rata to allocate the entire pool of funding (ie, 30M OP). These\nare effectively all of the scoring inputs that voters were presented to voters\nand projects prior to the start of the round.\n\n\nBASE CASE\n\nWe’ll use the settings above as our base case.\n\nHere are the outputs of the model.\n\nscoring_method               median\nvote_quorum                      17\nmin_amount                     1500\nnormalize                      True\n\nnum_projects_above_quorum       451\navg_payout                    66507\nmedian_payout                 35367\nmax_payout                   439910\n\n\nThis is what the overall distribution curve looks like.\n\n\n\nUntitled\n[https://europe1.discourse-cdn.com/bc41dd/original/2X/c/cd7fdffc5640804f227d775f0555e67bb3ba2ecf.png]\nUntitled910×292 3.62 KB\n[https://europe1.discourse-cdn.com/bc41dd/original/2X/c/cd7fdffc5640804f227d775f0555e67bb3ba2ecf.png]\n\n\n\nAnd we can see decent correlation between “impact” and tokens awarded (ie,\n“profit”).\n\n\n\nUntitled2\n[https://europe1.discourse-cdn.com/bc41dd/optimized/2X/6/60b3880f690f16b323f2446bda01c8ff0bdfd0a7_2_690x227.png]\nUntitled2910×300 10.8 KB\n[https://europe1.discourse-cdn.com/bc41dd/original/2X/6/60b3880f690f16b323f2446bda01c8ff0bdfd0a7.png]\n\n\n\n--------------------------------------------------------------------------------\n\n\n“QUORUM-MEDIAN” MODEL QUESTIONS\n\nUsing placeholder data, we used this simulator to answer a few questions raised\nby badgeholders. We explored the impact around these factors:\n\n * Total OP distribution amount\n * Number of projects reviewed\n * Quorum minimum\n * 0 ballots\n * Different models (ie. mean, quadratic formula)\n\nThe questions below are based on the quorum-median model as default. Our\nanalysis:\n\n 1. Each badgeholder had $30M OP to distribute. We did not have to deploy all of\n    the funds. What is the impact if badgeholders deploy all of the $30M vs\n    less?\n    \n    A. No impact.\n    \n    We can model this by setting willingness to spend to 0.5 instead of 1.0. The\n    implication on the model is that voters will use somewhere between 15M to\n    30M tokens, instead of everyone allocating 30M. (The actual willingness to\n    spend is distributed randomly.) We’ve kept everything else including the\n    scoring methodology the same.\n    \n    scoring_method               median\n    vote_quorum                      17\n    min_amount                     1500\n    normalize                      True\n    \n    num_projects_above_quorum       459\n    avg_payout                    65320\n    median_payout                 35258\n    max_payout                   434964\n    \n    \n    This is not surprising given that the results are still normalized to the\n    full 30M [https://www.notion.so/6f4d199c20184e8d9ea5a1fc8657af8e?pvs=21] and\n    the willingness to spend behavior is distributed randomly across the voter\n    population.\n\n 2. There were 645 projects to review, but badgeholders were not expected to\n    review all of them. There was no set consistent nor minimum or maximum of\n    projects per badgeholder to review. What is the impact if badgeholders\n    review lots of projects?\n    \n    A. High impact.\n    \n    We can model this by setting laziness to 0.1 instead of 0.5. This means the\n    average badgeholder is doing more work and considering more projects, even\n    if it means giving out very small allocations. (The actual number of\n    projects reviewed is distributed randomly.) Everything else is kept the\n    same.\n    \n    In our simulation, the number of projects above quorum increased\n    significantly compared to the baseline. Consequently, the average payout was\n    reduced. This had more impact on strong performing projects, cutting the max\n    payout nearly in half. The median payout increased slightly.\n    \n    scoring_method               median\n    vote_quorum                      17\n    min_amount                     1500\n    normalize                      True\n    \n    num_projects_above_quorum       613 (++)\n    avg_payout                    48883 (--)\n    median_payout                 37662 (+)\n    max_payout                   242175 (--)\n    \n\n 3. A project must meet a minimum of 1,500 OP to be funded\n    [https://plaid-cement-e44.notion.site/How-to-Vote-6f4d199c20184e8d9ea5a1fc8657af8e].\n    What is the impact of a 1,500 OP minimum?\n    \n    A. Low impact.\n    \n    We can model this by removing the min amount. This has the effect of\n    including another ~5% of projects on the right side of the tail, and thereby\n    lowering the average, median, and max payout across all projects.\n    \n    scoring_method               median\n    vote_quorum                      17\n    **min_amount                        1**\n    normalize                      True\n    \n    num_projects_above_quorum       478 (+)\n    avg_payout                    62711 (-)\n    median_payout                 32509 (-)\n    max_payout                   393434 (-)\n    \n\n 4. Round 3 utilizes a median calculation. Keeping the quorum requirement the\n    same, what is the impact of running the mean on the same dataset? What about\n    Quadratic funding?\n    \n    A. Medium impact.\n    \n    Running the mean instead of the median brought more projects above quorum,\n    reduced the max payout, and brought the median amount up. It resulted in a\n    smoother distribution curve too.\n    \n    **scoring_method                 mean**\n    vote_quorum                      17\n    min_amount                     1500\n    normalize                      True\n    \n    num_projects_above_quorum       480 (+)\n    avg_payout                    62398 (-)\n    median_payout                 37786 (+)\n    max_payout                   347658 (--)\n    \n\n\n\nUntitled3\n[https://europe1.discourse-cdn.com/bc41dd/original/2X/f/fd975afd3b07919264a6b3e832d3b9062b489f94.png]\nUntitled3910×292 3.55 KB\n[https://europe1.discourse-cdn.com/bc41dd/original/2X/f/fd975afd3b07919264a6b3e832d3b9062b489f94.png]\n\n\n\nThe quadratic funding model produced a very different distribution, with a much\nhigher median but the top project receiving much less as well. This could be a\ngood scoring method for rewarding a plurality of high impact projects and\navoiding an overly long tail.\n\n```\n**scoring_method               quadratic**\nvote_quorum                         17\nmin_amount                        1500\nnormalize                         True\n\nnum_projects_above_quorum          454\navg_payout                       66012 \nmedian_payout                    42259 (++)\nmax_payout                      338246 (--)\n```\n\n\n\n\nUntitled4\n[https://europe1.discourse-cdn.com/bc41dd/original/2X/3/3c711ed019d7003fe4ee8e4ac7d1bfbda2a8e54f.png]\nUntitled4910×292 3.55 KB\n[https://europe1.discourse-cdn.com/bc41dd/original/2X/3/3c711ed019d7003fe4ee8e4ac7d1bfbda2a8e54f.png]\n\n\n\n 5. A project needed a quorum of 17 votes. What is the impact of a higher quorum\n    of 34 votes?\n    \n    A. High impact.\n    \n    We can model this by increasing the quorum threshold from 17 to 34. This has\n    the effect of significantly reducing the number of projects on the right\n    side of the tail, and thereby increasing the average and median payout. The\n    effect on the max payout, however, is less pronounced.\n    \n    scoring_method               median\n    vote_quorum                      34\n    min_amount                     1500\n    normalize                      True\n    \n    num_projects_above_quorum       311 (--)\n    avg_payout                    96471 (++)\n    median_payout                 63710 (++)\n    max_payout                   454424 (+)\n    \n\n 6. Badgeholders had the choice to “abstain” by not voting (which expresses\n    indifference as to how much OP a project should receive\n    [https://www.notion.so/6f4d199c20184e8d9ea5a1fc8657af8e?pvs=21]) or vote\n    with a ballot of 0 OP distribution (”0 ballot”). Assuming the project meets\n    quorum, what is the impact of a 0 ballot on a project?\n    \n    A. A zero has the effect of canceling out a projects highest vote, thus they\n    have a greater impact (in absolute terms) on projects that are more popular\n    / receive higher token votes.\n    \n    For instance, we can model a project with 75 votes and a base award of 150K\n    OP. With one zero, its payout drops to 147K and with three zeroes it drops\n    to 139K. Each zero has the impact of reducing a popular project’s allocation\n    by about 2-3K.\n    \n    If we model a hypothetical project with 15 votes and a median of 3677 OP,\n    then getting two zeroes pushes it over quorum to 3510 OP. Even with 10\n    zeroes (out 25 total), the project remained above quorum. Each zero reduced\n    its allocation by only 160 OP.\n    \n    Finally, if we look at a project with 55 votes and a less normal\n    distribution, the first zero has an impact of 9K OP and the second another\n    9K OP. In this case, the project would have received 75K OP with 55 votes\n    (and no zeroes) and 57K OP with 57 votes (including two zeroes), making the\n    zeros a very hefty penalty.\n\n\nCONCLUSION\n\nThese are starting points for the OP Collective to gather insights. We hope you\nwill use this simulation to play with your own models and questions. We’d love\nto hear about your results and if you have any comments or questions, please\nleave a comment below!",
  "views": 1472,
  "like_count": 26,
  "word_count": 2406,
  "answer": [
    {
      "content": "I’m really glad someone is looking into the allocation system of OP tokens in\nRPGF. I think that the median choice was wise and mean/quadratic doesn’t\nrecognize that a few projects are really creating most of the really important\ntools/content in the ecosystem.\n\nHowever, I think this also brings to attention the problem in my mind with\nbadgeholders both choosing which projects are worthy of RPGF and the amount of\nOP tokens they’ll receive. Take a trial with a grand jury for example.\nTraditionally, most significant trials are decided by a jury making a yes/no\ndecision, followed by a judge determining the sentencing duration. Here, the\njury also picks the amount received but it doesn’t seem like it has the\nnecessary tools to be able to make the right decision.\n\nI think something along the lines of participatory budgeting experiments might\nprove better at allocating OP tokens to projects chosen by the badgeholders. As\nlong as the process is really transparent and the criterias for judging impact\nare well thought out obviously.",
      "created_at": "2023-12-26T14:10:30.132Z",
      "trust_level": 2,
      "username": "NathanVDH",
      "admin": false,
      "moderator": false,
      "staff": false,
      "like_count": 4
    },
    {
      "content": "This is fantastic! Thank you @amy [/u/amy] and @ccerv1 [/u/ccerv1] for asking\nthese questions and running this simulation. I think a robust simulation\nframework will be super impactful for designing and evaluating future rPGF\nexperiments.\n\nWith that in mind, I’d like to make one suggestion. I think its worth playing\nwith the assumption that impact is normally distributed. I suspect this might\ninfluence some of the findings in your analysis. For example, my prior is that\nimpact follows more of a power law / pareto distribution, and that would likely\nalter your median / mean analysis.",
      "created_at": "2023-12-23T16:44:51.216Z",
      "trust_level": 2,
      "username": "spengrah",
      "admin": false,
      "moderator": false,
      "staff": false,
      "like_count": 2
    },
    {
      "content": "Would be great if could simulate a scenario where we take the sqrt on each\nproject’s score before normalization.\n\nSuch as\n\n * Project A got 900 votes → sqrt 900 = 30\n * Project B got 100 votes → sqrt 100 = 10\n * Project C got 25 votes → sqrt 25 = 5\n\nAnd then normalize them to 30M OP",
      "created_at": "2023-12-22T16:23:12.187Z",
      "trust_level": 2,
      "username": "chom",
      "admin": false,
      "moderator": false,
      "staff": false,
      "like_count": 1
    }
  ],
  "created_at": "2023-12-21T16:28:13.574Z"
}