{
  "title": "Upgrade Proposal #4",
  "content": "Hi I’m Maurelian, an engineer at OP Labs.\n\nOP Labs is a software development company focused on the Optimism ecosystem, and\na core developer of the OP Stack. We provide some services to, but do not\nrepresent or speak on behalf of the Optimism Foundation.\n\nThis is the fourth proposed network upgrade after Bedrock. It introduces a new\nL1 contract, the SuperchainConfig, along with improvements to the existing pause\nmechanism.\n\n\nEXECUTIVE SUMMARY\n\nThis protocol upgrade would not only strengthens individual chains, but\nleverages the collective security intelligence of the entire Superchain\necosystem. The proposed upgrade takes the current incident response mechanism a\nstep further, introducing a Superchain-wide pause mechanism that can enhance\nprotection across multiple fronts, including the L1CrossDomainMessenger and\nwithdrawals for ERC-20 and ERC-721 tokens, which are additional security\ncritical code paths that protect user assets.\n\nIf this vote passes, the L1 contracts which support the OP Mainnet network will\nbe upgraded to the versions of those contracts in the optimism repo at commit\nhttps://github.com/ethereum-optimism/optimism/commit/856c08bf84d9aa829d1e764fc8e9a37d41960ba0856c08b\n(tagged\n[https://github.com/ethereum-optimism/optimism/releases/tag/op-contracts%2Fv1.2.0-rc.1]\nas release candidate op-contracts/v1.2.0-rc.1).\n\n\nTECHNICAL SPECIFICATION\n\nThis is a security focused upgrade. It is limited to the L1 smart contracts, and\ndoes not affect the node or execution client software.\n\nThe following changes are being introduced with the upgrade:\n\n 1. A new SuperchainConfig contract and improvements to the pausability\n    mechanism providing stronger protection for assets held in the bridge.\n    \n    * See the SuperchainConfig specification\n      [https://github.com/ethereum-optimism/specs/blob/8eb74667841c9cf86747cd133175272c76dd86f0/specs/superchain-configuration.md]\n\n 2. The OptimismPortal and L1CrossDomainMessenger are updated to fix an issue\n    (which would only occur during an upgrade), resulting in some values being\n    unnecessarily reset to their defaults after an upgrade.\n    \n    * PR here [https://github.com/ethereum-optimism/optimism/pull/8864]\n\n 3. The L1 OptimismMintableERC20TokenFactory is being updated with two\n    improvements:\n    \n    * Support for deploying a token with a custom number of decimals (PR here\n      [https://github.com/ethereum-optimism/optimism/pull/7182] and here\n      [https://github.com/ethereum-optimism/optimism/pull/7386]).\n    * Using CREATE2 to ensure that tokens with different properties do not have\n      the same addresses on different OP Chains. (PRs here\n      [https://github.com/ethereum-optimism/optimism/pull/6766] and here\n      [https://github.com/ethereum-optimism/optimism/pull/6839]).\n\n\nSECURITY CONSIDERATIONS\n\nThis upgrade has been audited by Trust Security, the final report can be found\nhere\n[https://github.com/ethereum-optimism/optimism/blob/develop/docs/security-reviews/2023_12_Trust_SuperchainConfigUpgrade.pdf].\n\n\nSUMMARY OF THE AUDIT FINDINGS\n\nThe audit did not identify any security issues in the system’s newly added\nfunctionality.\n\nThe audit did however identify an issue in the system’s existing upgrade path.\nThe affected contracts were fixed\n[https://github.com/ethereum-optimism/optimism/pull/8864] and upgraded on the\nSepolia testnet.\n\nImportantly, the issue could only be exploited if the upgrade was performed in a\nspecific way. In such a case, an attacker could have intercepted the upgrade\ntransaction, to perform a one-time double withdrawal of ETH held in the\nL1CrossDomainMessenger. Note that this contract currently holds zero ETH\n[https://etherscan.io/address/0x25ace71c97B33Cc4729CF772ae268934F7ab5fA1] at the\ntime of writing. Under normal circumstances, the vast majority of ETH is stored\nin the OptimismPortal.\n\nPlease see TRST-H-1 in the audit report\n[https://github.com/ethereum-optimism/optimism/blob/develop/docs/security-reviews/2023_12_Trust_SuperchainConfigUpgrade.pdf]\nfor a detailed discussion of the issue.\n\nThis issue is only exploitable during an upgrade, and the upgrade scripts have\nbeen fixed, so no future upgrades will be at risk of this issue.\n\nNo other findings from the audit presented a risk of a loss of assets.\n\n\nIMPACT SUMMARY\n\nOP Labs does not anticipate any down time due to this upgrade, and node\noperators are not affected.\n\nExisting contracts retain their current interfaces in order to remain backwards\ncompatible with any existing integrations.\n\nThe primary new functionality will be an extension of the pause mechanism, which\nprevents the withdrawal of assets from the system in the event that a\nvulnerability is identified. This will improve the incident response capacity of\nOP Labs.\n\nCurrently only the OptimismPortal’s proveWithdrawalTransaction()\nand finalizeWithdrawalTransaction() functions are pausable.\n\nFollowing this upgrade, this will expand to include the following additional\nfunctions:\n\n * L1CrossDomainMessenger.relayMessage()\n * L1StandardBridge.finalizeBridgeERC20()\n * L1StandardBridge.finalizeERC20Withdrawal\n * L1tandardBridge.finalizeBridgeETH()\n * L1StandardBridge.finalizeETHWithdrawal\n * L1ERC721Bridge.finalizeBridgeERC721()\n\nPrior to the upgrade, a new proxy (at the address here\n[https://github.com/ethereum-optimism/optimism/blob/op-contracts/v1.2.0-rc.1/op-chain-ops/upgrades/l1.go#L34])\nand implementation (at 0x53c165169401764778f780a69701385eb0ff19b7) for the\nSuperchainConfig (version 1.1.0) has been deployed and initialized.\n\nThe upgrade will also result in the following changes to the internal state of\nthe existing L1 contracts, with the implementations corresponding to the\naddresses listed here\n[https://github.com/ethereum-optimism/optimism/blob/op-contracts/v1.2.0-rc.1/op-chain-ops/cmd/op-upgrade-extended-pause/main.go#L26-L55].\n\nSummary of these changes:\n 1. The L1CrossDomainMessenger will be upgraded to version 2.2.0, and a new\n    storage variable superchainConfig will hold the address of the\n    SuperchainConfig proxy contract.\n 2. The L1ERC721Bridge contract will be upgraded to version 2.0.0, and a new\n    storage variable superchainConfig will hold the address of the\n    SuperchainConfig proxy contract.\n 3. The L1StandardBridge contract will be upgraded to version 2.0.0, and a new\n    storage variable superchainConfig will hold the address of the\n    SuperchainConfig proxy contract.\n 4. The OptimismPortal contract will be upgraded to version 2.1.0, and a new\n    storage variable superchainConfig will hold the address of the\n    SuperchainConfig proxy contract.5. The SystemConfig contract will be\n    upgraded to version 1.11.0.6. The L2OutputOracle contract will be upgraded\n    to version 1.7.0.\n 5. The OptimismMintableERC20Factory contract will be upgraded to version 1.8.0.\n\nAll L1 contracts have also had modifications to the source code formatting\n(white space and comment-style) which do not otherwise affect their behavior.\n\n\nACTION PLAN\n\nIf this proposal passes a Token House vote, the L1 contracts will be upgraded\nfollowing the completion of the Citizens’ House Cycle #18 Veto Period. The\nupgrade will be completed atomically such that all affected L1 contracts will be\nupgraded within a single transaction.\n\nAs this is a contracts-only upgrade, no action is required by node operators.",
  "views": 3620,
  "like_count": 56,
  "word_count": 2353,
  "answer": [
    {
      "content": "This is correct as it applies to OP Mainnet. It is important to note that for\nnow, this upgrade only applies to OP Mainnet. Other chains can follow this\nupgrade or not, given the current scope of the vote. In the future, it may\nbecome a mandatory requirement to use the shared guardian role for the Optimism\nCollective to provide sufficient, uniform security guarantees alongside further\ntech milestones (like interoperability).\n\nToday, if other OP Chains elect to follow this upgrade, they can continue to\ndesignate “ownership” of the Extended Pause functionality to the entity or\nentities currently responsible for the Guardian role on their chain, though it’s\nour strong recommendation that the most robust incident response plan would be\nto transfer guardian role to the Foundation. The Optimism Foundation may not be\nable to react quickly/through its primary incident response protocol in the\nevent of critical vulnerabilities present on chains which do not use Foundation\nas their guardian. [Note: this scope only applies to standard OP Chains. not\nforks. Optimism Foundation is not proposing a security SLA for forks or\nunofficial chains at this time, please do not transfer the guardian role before\ndirect communication with the Optimism Foundation.]",
      "created_at": "2024-01-26T23:07:43.174Z",
      "trust_level": 4,
      "username": "ben-chain",
      "admin": false,
      "moderator": true,
      "staff": true,
      "like_count": 7
    },
    {
      "content": "Hey @maurelian [/u/maurelian]!\n\nQuick note. The superchain config spec link seems broken. Right link maybe(?) in\na different repo: specs/specs/superchain-configuration.md at\n8eb74667841c9cf86747cd133175272c76dd86f0 · ethereum-optimism/specs · GitHub\n[https://github.com/ethereum-optimism/specs/blob/8eb74667841c9cf86747cd133175272c76dd86f0/specs/superchain-configuration.md]\n\nSo with this upgrade someone can pause L1 withdrawals from Optimism? Who is this\nsomeone? Who would have the power to do so?",
      "created_at": "2024-01-25T22:39:55.249Z",
      "trust_level": 2,
      "username": "lefterisjp",
      "admin": false,
      "moderator": false,
      "staff": false,
      "like_count": 7
    },
    {
      "content": "I am an Optimism Delegate [https://vote.optimism.io/delegate/polynya.eth] with\nsufficient voting power and I believe this proposal is ready to move to a vote.",
      "created_at": "2024-02-03T02:09:09.267Z",
      "trust_level": 2,
      "username": "polynya",
      "admin": false,
      "moderator": false,
      "staff": false,
      "like_count": 3
    },
    {
      "content": "The Optimism Foundation would not activate this pause mechanism in the event of\na bug in an application running on an OP Chain, as that would undermine his\nwould undermine the User Protection of State Transition and Messaging Validity\n[https://github.com/ethereum-optimism/OPerating-manual/blob/main/Law%20of%20Chains.md#:~:text=State%20Transition%20and,be%20violated%20by].\n\nThe pause functionality is only intended to be used to protect against\nwithdrawals which should be invalid, but are possible due to unforeseen bugs in\nthe OP Stack bridge or elsewhere in the protocol.\n\nGiven that all OP Chains will share the same logic across contracts in the L1\nsystem, it is expected that a bug present in one OP Chain will be present in\nall. Therefore it is essential to pause all chains at once. If a bug is present,\nany delay between pausing the first chain and pausing others will:\n\n * reveal to the world that a bug is likely to be present\n * provide time for a hacker to find and exploit the bug in any OP Chain which\n   is not yet paused.\n\nIt is also worth highlighting that this is not new functionality, but rather an\nenhancement of existing functionality. Per the proposal:\n\n\n[https://dub1.discourse-cdn.com/bc41dd/user_avatar/gov.optimism.io/maurelian/48/9353_2.png]\nmaurelian:\n\n> The primary new functionality will be an extension of the pause mechanism,\n> which prevents the withdrawal of assets from the system in the event that a\n> vulnerability is identified. This will improve the incident response capacity\n> of OP Labs.\n> \n> Currently only the OptimismPortal’s proveWithdrawalTransaction()\n> and finalizeWithdrawalTransaction() functions are pausable.\n> \n> Following this upgrade, this will expand to include the following additional\n> functions:\n> \n>  * L1CrossDomainMessenger.relayMessage()\n>  * L1StandardBridge.finalizeBridgeERC20()\n>  * L1StandardBridge.finalizeERC20Withdrawal\n>  * L1tandardBridge.finalizeBridgeETH()\n>  * L1StandardBridge.finalizeETHWithdrawal\n>  * L1ERC721Bridge.finalizeBridgeERC721()\n\nIt gives us greater confidence that if a pause is necessary to protect against a\nbug, it will indeed provide the protection required, thus providing the time to\nput in place the proper fix.",
      "created_at": "2024-01-30T21:55:29.312Z",
      "trust_level": 4,
      "username": "ben-chain",
      "admin": false,
      "moderator": true,
      "staff": true,
      "like_count": 2
    },
    {
      "content": "I am an optimism delegate with sufficient voting power and believe this proposal\nis ready to proceed to a vote",
      "created_at": "2024-02-03T14:13:25.103Z",
      "trust_level": 2,
      "username": "lefterisjp",
      "admin": false,
      "moderator": false,
      "staff": false,
      "like_count": 2
    }
  ],
  "created_at": "2024-01-25T19:03:20.625Z"
}