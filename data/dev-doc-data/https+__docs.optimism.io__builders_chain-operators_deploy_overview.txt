title: OP Stack Deployment Overview
lang: en-US
description: Learn about the different components of deploying the OP Stack.

import { Callout } from 'nextra/components'

OP Stack Deployment Overview

When deploying an OP Stack chain, you'll be setting up four different
components. It's useful to understand what each of these components does before
you start deploying your chain. The OP Stack can be deployed as a L3, which
includes additional considerations. The following information assumes you're
deploying a L2 Rollup on Ethereum.

Smart Contracts

The OP Stack uses a set of smart contracts on the L1 blockchain to manage
aspects of the Rollup. Each OP Stack chain has its own set of L1 smart
contracts that are deployed when the chain is created.

Sequencer Node

OP Stack chains use a Sequencer node to gather proposed transactions from users
and publish them to the L1 blockchain. OP Stack chains rely on at least one of
these Sequencer nodes. You can also run additional replica (non-Sequencer)
nodes.

Consensus Client

OP Stack Rollup nodes, like Ethereum nodes, have a consensus client. The
consensus client is responsible for determining the list and ordering of blocks
and transactions that are part of your blockchain. Several implementations of
the OP Stack consensus client exist, including op-node (maintained by the
Optimism Foundation), magi (maintained by
a16z) and hildr (maintained by OptimismJ).

Execution Client

OP Stack nodes, like Ethereum nodes, also have an execution client. The
execution client is responsible for executing transactions and maintaining the
state of the blockchain. Various implementations of the OP Stack execution
client exist, including op-geth (maintained by Optimism Foundation),
op-erigon
(maintained by Test in Prod), and op-nethermind.

Batcher

The Batcher is a service that publishes transactions from the Rollup to the L1
blockchain. The Batcher runs continuously alongside the Sequencer and publishes
The Batcher continuously publishes transactions alongside the Sequencer in regular batches.

Proposer

The Proposer is a service responsible for publishing transactions results (in
the form of L2 state roots) to the L1 blockchain. This allows smart contracts
on L1 to read the state of the L2, which is necessary for cross-chain
communication and reconciliation between state changes.

Software Dependencies

Dependency Version Version Check Command
git ^2 git --version
go ^1.21 go version
node ^20 node --version
pnpm ^8 pnpm --version
foundry ^0.2.0 forge --version
make ^3 make --version
jq ^1.6 jq --version
direnv ^2 direnv --version

Notes on Specific Dependencies

node

We recommend using the latest LTS version of Node.js (currently v20).
nvm is a useful tool that can help you
manage multiple versions of Node.js on your machine. You may experience
unexpected errors on older versions of Node.js.

foundry

It's recommended to use the scripts in the monorepo's package.json for
managing foundry to ensure you're always working with the correct version.
This approach simplifies the installation, update, and version checking
process.

direnv

Parts of our tutorial use direnv as a way of loading
environment variables from .envrc files into your shell. This means you won't
have to manually export environment variables every time you want to use them.
direnv only ever has access to files that you explicitly allow it to see.

After installing direnv, you
will need to make sure that direnv is hooked into your shell.
Make sure you've followed the guide on the direnv website,
then close your terminal and reopen it so that the changes take effect (or
source your config file if you know how to do that).

Next Steps

Discover how to deploy the smart contracts.
Find out how to create your genesis file.
Explore some chain operator best practices.