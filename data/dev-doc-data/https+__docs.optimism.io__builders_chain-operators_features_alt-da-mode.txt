title: How to Run an Alt-DA Mode Chain
lang: en-US
description: Learn how to configure and run an Alt-DA mode chain within the OP Stack.

import { Callout, Steps } from 'nextra/components'

How to Run an Alt-DA Mode Chain

This guide provides a walkthrough for chain operators who want to run an Alt-DA Mode chain. See the Alt-DA Mode Explainer for a general overview of this OP Stack configuration.
An Alt-DA Mode OP Stack chain enables a chain operator to post and read data to any alternative data availability layer that has built a functioning OP Stack DA Server.

Prerequisite

You should use at least the following compatible op* versions when running your chain.

op-node/v1.8.0-rc.1
op-proposer/v1.8.0-rc.1
op-batcher/v1.8.0-rc.1
Latest version of op-geth

For deploying your contracts, use the latest release.

Celestia's docs on how to run the Celestia DA server
EigenDA's docs on how to run the EigenDA DA server
Avail's docs on how to run the AvailDA DA Server
0gDA's docs on how to run the 0gDA DA Server
Near DA's docs on how to run the Near DA Server

Configure Your op-node

Spin up your OP chain as usual but set --altda.enabled=true and point both op-batcher and op-node to the DA server.
No configuration changes are required for op-geth or op-proposer.

   Alt-DA (EXPERIMENTAL)

   
    --altda.da-server value                                               ($OP_NODE_ALTDA_DA_SERVER)
          HTTP address of a DA Server
   
    --altda.enabled                    (default: false)                   ($OP_NODE_ALTDA_ENABLED)
          Enable Alt-DA mode
   
    --altda.verify-on-read             (default: true)                    ($OP_NODE_ALTDA_VERIFY_ON_READ)
          Verify input data matches the commitments from the DA storage service


Configure Your Batcher

Set --altda.enabled=true and --altda.da-service=true.
Provide the URL for --atlda.da-server=$DA_SERVER_HTTP_URL.

    --altda.da-server value                                               ($OP_BATCHER_ALTDA_DA_SERVER)
          HTTP address of a DA Server
   
    --altda.da-service                 (default: false)                   ($OP_BATCHER_ALTDA_DA_SERVICE)
          Use DA service type where commitments are generated by the DA server
   
    --altda.enabled                    (default: false)                   ($OP_BATCHER_ALTDA_ENABLED)
          Enable Alt-DA mode
   
    --altda.verify-on-read             (default: true)                    ($OP_BATCHER_ALTDA_VERIFY_ON_READ)
          Verify input data matches the commitments from the DA storage service

  After completing steps 1-3 above, you will have an Alt-DA mode chain up and running.

Set Your Fee Configuration

Chain operators are not posting everything to Ethereum, just commitments, so chain operators will need to determine fee scalars values to charge users. The fee scalar values are network throughput dependent, so values will need to be adjusted by chain operators as needed.


Cost structure for Alt-DA Mode: The transaction data is split up into 128kb chunks and then submitted to your DA Layer. Then, 32 byte commitments are submitted (goes to batch inbox address) to L1 for each 128kb chunk. Then, figure out how much that costs relative to the amount of transactions your chain is putting through.


Set scalar values inside the deploy config. The example below shows some possible fee scalar values, calculated assuming negligible DA Layer costs, but will need to be adjusted up or down based on network throughput - as a reminder of how to set your scalar values, see this section of the docs.

// Set in Deploy Config
  "gasPriceOracleBaseFeeScalar": 7663, // Approximate commitment tx base cost
  "gasPriceOracleBlobBaseFeeScalar": 0, // blobs aren't used for submitting the small data commitments

For Node Operators (Full and Archive Nodes)

Run a DA server as laid out in Step 1
Provide the same  --altda.enabled=true, --altda.da-server... on op-node as listed in Step 2

Inclusion Criteria

Alt DA teams who want to be featured on this page must meet the following criteria:

Functional DA Server, maintained in your own repo
Supporting detailed documentation, to be referenced here
Functioning OP Stack devnet using your DA server with linked configuration, contract addresses, and RPC address

Next Steps

Additional questions? See the FAQ section in the Alt-DA Mode Explainer.
For more detailed info on Alt-DA Mode, see the specs.
If you experience any problems, please reach out to developer support.