title: Tracing Deposits and Withdrawals
lang: en-US
description: Learn how to use the Optimism SDK to trace deposits and withdrawals between L1 and L2.

import { Callout, Steps } from 'nextra/components'
import { WipCallout } from '@/components/WipCallout'

In this tutorial, you'll learn how to use the Optimism SDK to trace a Standard Bridge deposit or withdrawal between L1 and L2.
You'll specifically learn how to determine the status of a deposit or withdrawal and how to retrieve the transaction receipt for the executed transaction on L1 (for withdrawals) or L2 (for deposits).

Dependencies

node
pnpm

Create a Demo Project

You're going to use the Optimism SDK for this tutorial.
Since the Optimism SDK is a Node.js library, you'll need to create a Node.js project to use it.

{Make a Project Folder}

mkdir op-sample-project
cd op-sample-project

{Initialize the Project}

pnpm init

{Install the Optimism SDK}

pnpm add @eth-optimism/sdk

{Install ethers.js}

pnpm add ethers@^5

Add RPC URLs to Your Environment

You'll be using the getMessageReceipt function from the Optimism SDK during this tutorial.
This function use event queries to retrieve the receipt for a deposit or withdrawal.
Since this function uses large event queries, you'll need to use an RPC provider like Alchemy that supports indexed event queries.
Grab an L1 and L2 RPC URL for Sepolia and OP Sepolia, respectively.

export L1_RPC_URL=... # Sepolia RPC URL
export L2_RPC_URL=... # OP Sepolia RPC URL

Start the Node REPL

You're going to use the Node REPL to interact with the Optimism SDK.
To start the Node REPL run the following command in your terminal:

node

This will bring up a Node REPL prompt that allows you to run javascript code.

Import Dependencies

You need to import some dependencies into your Node REPL session.

{Import the Optimism SDK}



{Import ethers.js}



Set Session Variables

You'll need a few variables throughout this tutorial.
Let's set those up now.

{Import RPC URLs}



{Set the deposit to trace}

You'll be tracing a specific deposit in this tutorial.
Deposit tracing is generally based on the transaction hash of the transaction that triggered the deposit.
You can replace this transaction hash with your own if you'd like.



{Set the withdrawal to trace}

You'll also be tracing a specific withdrawal in this tutorial.
Like with deposits, withdrawal tracing is generally based on the transaction hash of the transaction that triggered the withdrawal.
You can replace this transaction hash with your own if you'd like.



{Create the RPC providers}



Create the CrossDomainMessenger

The Optimism SDK exports a CrossChainMessenger class that makes it easy to interact with the Standard Bridge contracts.

Create an instance of the CrossChainMessenger class:



Trace a Deposit

You can use the CrossChainMessenger instance to trace a deposit.

{Get the deposit status}

It's often useful to know the status of a deposit.
Deposits can have a number of statuses depending on where the deposit is within its lifecycle.
Refer to the Optimism SDK documentation for a full list of potential deposit statuses.



{Get the deposit transaction receipt}

You can also use the CrossChainMessenger instance to get the transaction receipt for the L2 transaction that executes and completes the deposit.
Note that this function will also return the message status of the deposit and is therefore an alternative to the previous function.
The result of this function is an object with a messageStatus property and a transactionReceipt property that is identical to the result of the ethers function getTransactionReceipt.



{Parse deposit logs}

Like any other transaction receipt, the deposit transaction receipt contains logs that can be parsed to get additional information about the deposit.
You can iterate through these logs and parse them just as you would parse any other receipt.
For instance, you may wish to search for Mint events to determine the amount of tokens that were minted as a result of the deposit.

{Get the deposit transaction}

Once you have the transaction receipt, you can directly query for the actual L2 transaction that executed the deposit.



Trace a Withdrawal

You can also use the CrossChainMessenger instance to trace a withdrawal.

{Get the withdrawal status}

Like deposits, withdrawals can have a number of statuses depending on where the withdrawal is within its lifecycle.
Refer to the Optimism SDK documentation for a full list of potential withdrawal statuses.



{Get the withdrawal transaction receipt}

You can also use the CrossChainMessenger instance to get the transaction receipt for the L1 transaction that executes and completes the withdrawal.
The result of this function is an object with a messageStatus property and a transactionReceipt property that is identical to the result of the ethers function getTransactionReceipt.



{Parse withdrawal logs}

Like any other transaction receipt, the withdrawal transaction receipt contains logs that can be parsed to get additional information about the withdrawal.
You can iterate through these logs and parse them just as you would parse any other receipt.
For instance, you may wish to search for Burn events to determine the amount of tokens that were burned as a result of the withdrawal.

{Get the withdrawal transaction}

Once you have the transaction receipt, you can directly query for the actual L1 transaction that executed the withdrawal.